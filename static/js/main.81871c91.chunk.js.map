{"version":3,"sources":["logo.svg","serviceWorker.js","components/ui/PlaylistPage.jsx","components/api/SpotifyDataHandler.jsx","components/ui/HomePage.jsx","components/ui/LoginPage.jsx","components/ui/Recommendation/PlaylistRecommendationTable.jsx","components/ui/Analytics/TrackTable.jsx","components/ui/Analytics/TrackScatterGraph.jsx","App.jsx","components/ui/_depreicated/TrackAnalysis.jsx","index.jsx"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","playlistComponent","api_SpotifyDataHandler","SpotifyDataHandler","token","_this","this","Object","classCallCheck","Spotify","SpotifyWebAPI","fetchPlaylistData","playlistID","arguments","length","undefined","auth","spotify","sample","getPlaylist","data","track_list","err","fetchTrackData","track_ids","generateTrackIDListString","track_data_sample","audio_features","Promise","res","rej","getAudioFeaturesForTracks","Error","concat","asyncToGenerator","regenerator_default","a","mark","_callee","ids_string","i","wrap","_context","prev","next","items","track","id","abrupt","stop","randomTrackID","_callee2","track_amount","_context2","Math","floor","random","fetchCustomizedRecommendation","_ref3","_callee3","energy","valence","artistID","_context3","getRecommendations","limit","target_energy","target_valence","seed_artists","tracks","_x","_x2","_x3","apply","componentDidMount","props","onRef","componentWillUnmount","setAccessToken","user_info","getMe","result","display_name","access_token","sessionStorage","setItem","getUserPlaylists","playlists","finally","name","fetchPlaylists","react_default","createElement","getItem","HomePage","possibleConstructorReturn","getPrototypeOf","call","redirectToPlaylist","history","push","pathname","scope","render","dropdown_playlists","map","playlist","Button","className","key","href","src","logo","alt","style","animation","animationDelay","onSubmit","handleSubmit","type","value","onChange","handleChange","placeholder","required","Dropdown","Toggle","variant","Menu","bind","assertThisInitialized","_this2","_ref","sent","setState","playlistData","event","target","preventDefault","React","Component","LoginPage","clientID","client","uri","url","width","Form","horizontal","role","aria-label","FormGroup","controlId","bsStyle","PlaylistRecommendationTable","determineStrengthColor","nrg_val","showMoreInfo","sortBy","track_data","sort","low","high","localeCompare","playlistTable","recommendedPlaylist","backgroundColor","artists","artist","external_urls","duration_ms","display","onClick","recommendedPlaylistTable","energyAverage","valenceAverage","topArtistID","resolve","reject","PlaylistPage","setRecommendedPlaylistVisible","playlistCsv","bestTrackPopularity","params","playlistId","fetchPlaylist","finalizedData","sourcePlaylist","_ref2","energyTotal","valenceTotal","filteredData","results","item","index","audioFeatures","trackID","albumName","album","albumReleaseDate","release_date","totalTracks","total_tracks","trackName","trackPopularity","popularity","artistType","danceability","speechiness","_x4","_x5","all","PlaylistRecommendationTable_PlaylistRecommendationTable","jsonexport","csv","sourcePlaylistDataDownloadBtn","recommendedPlaylistTableDisplayBtn","csvHref","escape","download","document","getElementById","color","styles","children","marginBottom","textAlign","TrackTable","title","TrackScatterGraph","chartStyle","es","formattedData","labels","datasets","label","x","y","pointBackgroundColor","pointBorderColor","trackList","forEach","options","text","fontColor","legend","scales","xAxes","scaleLabel","labelString","ticks","beginAtZero","max","yAxes","tooltips","callbacks","xLabel","yLabel","height","redirectURI","margin","borderRadius","opacity","animationFillMode","TrackAnalysis","onload","Particles","init","selector","Analytics_TrackTable","baseURL","_localhost","Callback","URLSearchParams","hash","replace","get","react_router","to","App","redirectURILocal","react_router_dom","basename","path","exact","components_ui_LoginPage","components_ui_HomePage","component","ReactDOM","src_App","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.81871c91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2cacfe33.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport * as jsonexport from 'jsonexport/dist';\r\n\r\nimport SpotifyDataHandler from '../api/SpotifyDataHandler';\r\n\r\n//import TrackTable from './Analytics/TrackTable'\r\n//import TrackScatterGraph from './Analytics/TrackScatterGraph'\r\nimport PlaylistRecommendation from './Recommendation/PlaylistRecommendationTable'\r\n\r\n// Component\r\nimport { Button } from 'react-bootstrap';\r\nlet playlistComponent\r\n\r\nclass PlaylistPage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            playlist: null,\r\n            playlistCsv: null,\r\n\r\n            //  Number values\r\n            energyAverage: null,\r\n            valenceAverage: null,\r\n            topArtistID: null,\r\n            bestTrackPopularity: null\r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        let playlistID = this.props.match.params.playlistId;\r\n        switch (playlistID) {\r\n            case 'Discover Weekly':\r\n                playlistID = 'discover_weekly_placeholder'\r\n                // TODO: Regex search Discover Weekly using DataHandler\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        SpotifyDataHandler.fetchPlaylist(playlistID).then(async playlist => {\r\n            this.setState(() => ({ sourcePlaylist: playlist }))\r\n\r\n            // Filter JSON data\r\n            const finalizedData = await new Promise(async (resolve, reject) => {\r\n\r\n                //  Total audio values\r\n                let energyTotal = 0, valenceTotal = 0\r\n\r\n                let filteredData = playlist.tracks.items.map(async (item, index) => {\r\n                    //.console.log(item.track)\r\n                    let audioFeatures = await SpotifyDataHandler.fetchTrackData(item.track.id)\r\n\r\n                    energyTotal += audioFeatures.energy\r\n                    valenceTotal += audioFeatures.valence\r\n\r\n\r\n                    //  Calculating averages\r\n                    if (index === playlist.tracks.items.length - 1)\r\n                        this.setState(() => ({\r\n                            energyAverage: (energyTotal / filteredData.length),\r\n                            valenceAverage: (valenceTotal / filteredData.length)\r\n                        }))\r\n\r\n\r\n                    return {\r\n\r\n                        //  Core track data\r\n                        trackID: item.track.id,\r\n                        albumName: item.track.album.name,\r\n                        albumReleaseDate: item.track.album.release_date,\r\n                        totalTracks: item.track.album.total_tracks,\r\n                        trackName: item.track.name,\r\n                        trackPopularity: item.track.popularity,\r\n                        artist: item.track.artists.map(artist => {\r\n                            if (item.track.popularity > this.state.bestTrackPopularity) {\r\n                                this.setState({ bestTrackPopularity: item.track.popularity })\r\n                                this.state.topArtistID = artist.id\r\n                            }\r\n                            return {\r\n                                name: artist.name,\r\n                                artistType: artist.type\r\n                            }\r\n                        }),\r\n\r\n                        //  Audio Features\r\n\r\n                        energy: audioFeatures.energy,\r\n                        valence: audioFeatures.valence,\r\n                        danceability: audioFeatures.danceability,\r\n                        speechiness: audioFeatures.speechiness\r\n\r\n                    }\r\n                })\r\n\r\n                const results = await Promise.all(filteredData)\r\n\r\n                console.log(`Playlist's tracks' data resolved`)\r\n                console.log(results)\r\n                resolve(results)\r\n            })\r\n\r\n            console.log(\r\n                `Best artist's ID: ${this.state.topArtistID}\r\n                \\nAverage valence: ${this.state.valenceAverage}\r\n                \\nAverage energy: ${this.state.energyAverage}`)\r\n\r\n            if (this.state.energyAverage)\r\n                playlistComponent = (\r\n                    <PlaylistRecommendation\r\n                        energyAverage={this.state.energyAverage}\r\n                        valenceAverage={this.state.valenceAverage}\r\n                        topArtistID={this.state.topArtistID}>\r\n                    </PlaylistRecommendation>)\r\n            else\r\n                playlistComponent = (<p>Loading recommendations...</p>)\r\n\r\n            //Convert filtered Json data to csv\r\n            jsonexport(finalizedData, (err, csv) => {\r\n                if (err) return console.log(err);\r\n\r\n                console.log(`CSV file of playlist ${playlistID} created.`)\r\n                //.console.log(csv)\r\n\r\n                this.setState({\r\n                    playlist: playlist,\r\n                    playlistCsv: csv\r\n                })\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const csvHref = `data:text/csv;charset=utf-8,${escape(this.state.playlistCsv)}`\r\n        let sourcePlaylistDataDownloadBtn, recommendedPlaylistTableDisplayBtn\r\n\r\n        //TODO: Include graphing visuals (plug in TrackScatterGraph)\r\n        if (this.state.sourcePlaylist)\r\n            sourcePlaylistDataDownloadBtn = (\r\n                <Button href={csvHref}\r\n                    download=\"playlist_data.csv\"\r\n                    variant='dark'>\r\n                    CSV file of {this.state.sourcePlaylist.name}'s track data\r\n                </Button >)\r\n        recommendedPlaylistTableDisplayBtn = (\r\n            <Button onClick={() => { document.getElementById('recommended-playlist-table').style.display = 'initial' }}\r\n                style={{ color: 'white', backgroundColor: 'darkslategray' }}>\r\n                What would you recommend me?\r\n            </Button >)\r\n\r\n        return (\r\n            <div style={styles} >\r\n                <h1>Incoming playlist data!</h1>\r\n                {this.props.children}\r\n\r\n                <div className='playlist-action-buttons' style={{ marginBottom: '16px' }}>\r\n                    {recommendedPlaylistTableDisplayBtn}\r\n                    {sourcePlaylistDataDownloadBtn}\r\n                </div>\r\n                {playlistComponent}\r\n            </div >\r\n        );\r\n    }\r\n\r\n    setRecommendedPlaylistVisible = () => {\r\n\r\n    }\r\n}\r\n\r\nvar styles = {\r\n    textAlign: 'center',\r\n    color: 'white'\r\n}\r\n\r\nexport default PlaylistPage;\r\n\r\n","/* \r\n    Handles authentication and data retreival with Spotify API\r\n    For use with online React web applications.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       3/14/19\r\n*/\r\n\r\n//  Internal Components\r\nimport React from 'react'\r\nimport SpotifyWebAPI from 'spotify-web-api-js'\r\n\r\n//  Resources\r\nimport auth from '../../resources/auth.json'   //  Must include valid IDs before methods are called\r\n\r\n//  Samples\r\nimport track_list from '../../data/track_list.json'\r\n//import track_data from '../../data/track_info.json'\r\n//import track_list_sample from '../../data/track_list_sample.json'\r\nimport track_data_sample from '../../data/track_info_sample.json'\r\nimport { Promise } from 'q';\r\n\r\n\r\nclass SpotifyDataHandler {\r\n    constructor (token) {\r\n        this.setAccessToken(token)  // Sets token across application\r\n\r\n        this.user_info = this.Spotify.getMe().then((result) => {\r\n            console.log(`--- LOGGED IN AS ${result.display_name} ---`)\r\n\r\n            return result\r\n        })\r\n    }\r\n\r\n    Spotify = new SpotifyWebAPI()\r\n\r\n    setAccessToken(access_token) {\r\n        this.Spotify.setAccessToken(access_token);\r\n\r\n        sessionStorage.setItem('token', access_token);// Sets new global token\r\n\r\n        console.log('New token for Spotify set from user input!')\r\n    }\r\n\r\n    /*   Data fetch functions   */\r\n\r\n    async fetchPlaylists() {\r\n        let playlists\r\n\r\n        await this.Spotify.getUserPlaylists(this.user_info.id)\r\n            .catch((error) => {\r\n                console.error(error)\r\n            }).then((result) => {\r\n                console.log(result)\r\n                playlists = result.items\r\n            }).finally(() => {\r\n                return 'null'\r\n            })\r\n\r\n        return playlists\r\n    }\r\n\r\n    fetchPlaylist(playlistID) {\r\n        if (playlistID === null) {\r\n            return console.error('User did not specify Playlist ID.');\r\n        }\r\n\r\n        return this.Spotify.getPlaylist(playlistID)\r\n    }\r\n\r\n    async fetchPlaylistID(name) {\r\n        if (!this.playlists)\r\n            await this.fetchPlaylists()\r\n        console.log(this.playlists)\r\n\r\n        if (!name) {\r\n            console.err('Playlist ID fetching failed: No playlist info specified.')\r\n            return 'not cool'\r\n        } else {\r\n            //this.Spotify\r\n            return 'cool'\r\n        }\r\n    }\r\n\r\n    //  Returns Track object using specified playlist ID(s), defaults to sample ID\r\n    fetchPlaylistData = (\r\n        playlistID = this.state.playlistID) => {\r\n        //  When sample playlist is requested\r\n        playlistID = 'sample' ? auth.spotify.sample.playlistID : playlistID\r\n\r\n        if (playlistID === null) return console.error('User did not specify Playlist ID.')\r\n\r\n        this.Spotify.getPlaylist(playlistID)\r\n            .then(data => {\r\n                track_list = data\r\n                console.log(`Received a playlist: `, data)\r\n            }, err => {\r\n                console.log(`Error fetching playlist - `, err)\r\n            })\r\n    }\r\n\r\n    //  Returns Track object(s) using specified Track ID(s), defaults to inputted playlist ID\r\n    fetchTrackData = (\r\n        track_ids = this.generateTrackIDListString()) => {\r\n        //  When sample track data is requested\r\n        if (track_ids === 'sample') return track_data_sample.audio_features\r\n\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getAudioFeaturesForTracks(track_ids)\r\n                .then(data => {\r\n                    //.console.log(`Audio features for track `, data.audio_features[0])\r\n                    res(data.audio_features[0])\r\n                }, err => {\r\n                    rej(new Error(`Error fetching track features - ${err}`))\r\n                })\r\n        })\r\n    }\r\n\r\n    /*  Formatting/Generation functions */\r\n\r\n    //  Returns string of track IDs from currently populated playlist JSON\r\n    generateTrackIDListString = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        var ids_string = \"\"\r\n\r\n        for (var i = 0; i < track_list.items.length(); i++) {\r\n            ids_string += `${track_list.items[i].track.id},`\r\n        }\r\n\r\n        return ids_string\r\n    }\r\n\r\n    /*  Random data fetch functions   */\r\n\r\n    //  Returns random Track ID using an exisiting Playlist object\r\n    randomTrackID = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        let track_amount = track_list.items.length()\r\n\r\n        return track_list.items[Math.floor(Math.random() * track_amount)].track.id\r\n    }\r\n\r\n    /*  Customized recommendation fetchers */\r\n\r\n    // Based off a playlist's average energy, valence, and best artist. //* Version 1\r\n    fetchCustomizedRecommendation = async (energy, valence, artistID) => {\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getRecommendations({\r\n                limit: '25',\r\n                target_energy: energy,      //  Average\r\n                target_valence: valence,    //  Average\r\n                seed_artists: artistID      //  Top artist\r\n            }).then(data => {\r\n                console.log(data)\r\n                res(data.tracks)\r\n            }, err => {\r\n                console.error('Error fetching recommendations')\r\n                rej(err)\r\n            }\r\n            )\r\n\r\n        })\r\n\r\n    }\r\n\r\n    /*  Lifecycle functions  */\r\n    componentDidMount = () => {\r\n        this.props.onRef(this)\r\n    }\r\n    componentWillUnmount = () => {\r\n        this.props.onRef(undefined)\r\n    }\r\n\r\n    //  This is a purely functional component, hence no need to return any HTML.\r\n    render() {\r\n        return (<p></p>)\r\n    }\r\n}\r\n\r\nexport default new SpotifyDataHandler(sessionStorage.getItem('token'));","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist/user ID combo and submit to\r\n    retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Dropdown, Button } from 'react-bootstrap'\r\nimport SpotifyDataHandler from '../api/SpotifyDataHandler'\r\n\r\n//  Internal Components\r\nimport logo from '../../logo.svg'\r\nimport './HomePage.scss'\r\n\r\nclass HomePage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            playlistID: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        var playlistData = async () => {\r\n            let playlists = await SpotifyDataHandler.fetchPlaylists();\r\n\r\n            this.setState(() => {\r\n                return { playlists: playlists }\r\n            });\r\n        }\r\n        playlistData()\r\n    }\r\n\r\n    redirectToPlaylist = () => {\r\n        this.props.history.push({ pathname: this.props.scope + '/playlist/' + this.state.playlistID })\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ playlistID: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.redirectToPlaylist();\r\n    }\r\n\r\n    render = () => {\r\n\r\n        var dropdown_playlists = this.state.playlists ?\r\n            this.state.playlists.map(playlist => {\r\n                return (<Button className='btn-block'\r\n                    key={playlist.id + '-key'} href={`${this.props.scope}playlist/${playlist.id}`}\r\n                >\r\n                    {playlist.name}</Button>)\r\n            })\r\n            : 'Loading playlists'\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </header>\r\n\r\n                <div className='App-body'>\r\n\r\n                    <div className=\"body-text\" style={{ animation: 'text-slide-up-empty-full 1s' }}>\r\n                        <p className=\"hello-headline\" id=\"hello-headline\">\r\n                            <b>Hi! I'm your Spotify Researcher.</b>\r\n                        </p>\r\n                        <p className=\"hint-headline\" id=\"hint-headline\" style={{ animationDelay: '2s' }}>\r\n                            Input a playlist ID to learn a little more about your music.\r\n                            <br />\r\n                        </p>\r\n                    </div>\r\n\r\n                    <form className='user-form' onSubmit={this.handleSubmit}>\r\n                        <br />\r\n                        <input type=\"text\" value={this.state.playlistID} name=\"playlistID\"\r\n                            onChange={this.handleChange} placeholder=\"Playlist ID\" required />\r\n                        <br />\r\n                        <Dropdown id=\"dropdown-playlist\" className='fill-style'>\r\n                            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className='fill-style'>\r\n                                Select one of your playlists\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className='fill-style' >\r\n                                {dropdown_playlists}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <br />\r\n                        <input type=\"submit\" value=\"Get the Facts\" />\r\n                    </form>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport { Form, FormGroup, Button } from 'react-bootstrap';\r\nimport './LoginPage.scss';\r\nimport auth from '../../resources/auth.json';\r\n\r\n\r\nclass LoginPage extends Component {\r\n    render() {\r\n        const clientID = auth.spotify.client.id;\r\n        const scope = 'user-read-private user-read-email';\r\n        console.log(this.props.uri)\r\n        const responseType = 'token';\r\n        const state = '123';\r\n\r\n        const url =\r\n            `https://accounts.spotify.com/authorize?client_id=${clientID}&redirect_uri=${this.props.uri}&scope=${scope}&response_type=${responseType}&state=${state}`\r\n        return (\r\n            <div className=\"login\" style={{ width: '-webkit-fill-available' }}>\r\n                <Form horizontal>\r\n                    <h1>\r\n                        <span role='img' aria-label='Music'>🎶</span>\r\n                        Welcome to Playlist Spotter\r\n                        <span role='img' aria-label='Music'>🎶</span>\r\n                    </h1>\r\n                    <br />\r\n                    <FormGroup controlId=\"formHorizontalEmail\">\r\n                        <h4>Sign in to Spotify to learn about your playlists and get recommendations!</h4>\r\n                        <Button bsStyle=\"success\" href={url} >Continue</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;\r\n","/*  \r\n    Generates an HTML table of a playlist recommendation\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\n\r\nimport SpotifyDataHandler from '../../api/SpotifyDataHandler'\r\n\r\nimport './PlaylistRecommendationTable.scss'\r\n\r\nexport default class PlaylistRecommendationTable extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            recommendedPlaylistTable: (<p>'asdas'</p>)\r\n        }\r\n\r\n        //TODO: Add sorting function\r\n        this.sortBy = this.sortBy.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //* See function to customize parameters\r\n        SpotifyDataHandler.fetchCustomizedRecommendation(\r\n            this.props.energyAverage, this.props.valenceAverage, this.props.topArtistID)\r\n            .then(async tracks => {\r\n                await new Promise((resolve, reject) => {\r\n                    this.setState(() => ({\r\n                        recommendedPlaylist: tracks\r\n                    }))\r\n\r\n\r\n                    //.console.log(resolve)\r\n                })\r\n            })\r\n    }\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    determineStrengthColor = (nrg_val) => {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    //  Display more info on a single track\r\n    showMoreInfo = () => {\r\n        console.log('You clicked on a song! A future feature will replace this message!')\r\n    }\r\n\r\n    sortBy = (type) => {\r\n        console.log(`Sorting by ${type}`)\r\n\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    if (typeof low[type] === 'string') return ('' + low[type]).localeCompare(high[type]);\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n    // Table of tracks displaying details of the ones in the table header.\r\n    render = () => {\r\n        //.console.log(this.state.recommendedPlaylist)\r\n\r\n        let playlistTable\r\n        if (this.state.recommendedPlaylist) {\r\n\r\n            playlistTable =\r\n                (<tbody>\r\n                    {\r\n                        this.state.recommendedPlaylist.map(track =>\r\n                            (\r\n                                <tr className=\"track-table-item\" key={`item-${track.id}`}\r\n                                    style={{ backgroundColor: this.determineStrengthColor(track.energy) }}>\r\n                                    <td className='artist-text'>\r\n                                        {\r\n                                            track.artists.map(artist => {\r\n\r\n                                                return (<a href={artist.external_urls.spotify} key={`item-${artist.id}`}>\r\n                                                    {artist.name},\r\n                                                </a>)\r\n                                            }\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                    <td className='title-text'>\r\n                                        <a href={track.external_urls.spotify}>\r\n                                            {track.name}\r\n                                        </a>\r\n                                    </td>\r\n                                    <td className='length-text'>{Math.floor((track.duration_ms / 1000))}</td>\r\n                                    <td>{/*track.energy*/}</td>\r\n                                    <td>{/*track.valence*/}</td>\r\n                                </tr>\r\n                            )\r\n                        )\r\n                    }\r\n                </tbody>)\r\n\r\n\r\n            console.log('Generated recommended playlist off custom queries!')\r\n        }\r\n\r\n\r\n        if (playlistTable)\r\n            return (\r\n                <div className='track-table' id='recommended-playlist-table' style={{ display: 'none', animationDelay: '0ms' }}>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <button type='sort' name='artist' onClick={() => this.state.sortBy('artist')}>\r\n                                        Artist\r\n                                    </button>\r\n                                </th>\r\n                                <th>\r\n                                    <button type='sort' name='title' onClick={() => this.state.sortBy('title')}>\r\n                                        Title\r\n                                    </button>\r\n                                </th>\r\n                                <th>\r\n                                    <button type='sort' name='seconds' onClick={() => this.state.sortBy('duration_ms')}>\r\n                                        Seconds\r\n                                    </button>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        {playlistTable}\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            )\r\n        else\r\n            return (<p>Loading recommendations...</p>)\r\n    }\r\n}","/*  \r\n    Generates an HTML table of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\nimport './TrackTable.scss'\r\n\r\n\r\nfunction TrackTable(props) {\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(nrg_val) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    //  Display more info on a single track\r\n    function showMoreInfo() {\r\n        console.log('You clicked on a song! A future feature will replace this message!')\r\n    }\r\n\r\n    // Table of tracks displaying details of the ones in the table header.\r\n    return (\r\n        <div className='track-table'>\r\n            <table id='track-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <button type='sort' name='artist' onClick={() => props.sortBy('artist')}>\r\n                                Artist\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='title' onClick={() => props.sortBy('title')}>\r\n                                Title\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='energy' onClick={() => props.sortBy('energy')}>\r\n                                Energy\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='valence' onClick={() => props.sortBy('valence')}>\r\n                                Valence\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='seconds' onClick={() => props.sortBy('duration_ms')}>\r\n                                Seconds\r\n                            </button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.track_list.map(track =>\r\n                            (\r\n                                <tr className=\"track-table-item\" key={track.title}\r\n                                    style={{ backgroundColor: determineStrengthColor(track.energy) }}\r\n                                    onClick={() => showMoreInfo()}>\r\n                                    <td>{track.artist}</td>\r\n                                    <td>{track.title}</td>\r\n                                    <td>{track.energy}</td>\r\n                                    <td>{track.valence}</td>\r\n                                    <td>{Math.floor((track.duration_ms / 1000))}</td>\r\n                                </tr>\r\n                            )\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrackTable","/*  \r\n    Generates an interactive scatter plot of a playlist's tracks\r\n    comparing their energy and valence values.\r\n\r\n    @author Joe (joev@uw.edu)\r\n    @reference (https://www.chartjs.org/docs/2.8.0/)\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Scatter } from 'react-chartjs-2'\r\n\r\n\r\nexport default function TrackScatterGraph(props) {\r\n\r\n\r\n    function parseData() {\r\n        //console.log('Graphing following data:', props.trackList)\r\n\r\n        // SAMPLE DATA TABLE\r\n        let formattedData = {\r\n            labels: [\"Track 1\"],\r\n            datasets: [{\r\n                label: 'Energy vs. Valence',\r\n                backgroundColor: 'none',\r\n\r\n                data: [{\r\n                    x: .41,\r\n                    y: 0\r\n                }],\r\n\r\n                pointBackgroundColor: [\"Red\"],\r\n                pointBorderColor: [\"Black\"]\r\n            }]\r\n        }\r\n\r\n        //  Parsing data\r\n        props.trackList.forEach((track, index) => {\r\n            formattedData.labels[index] = `${track.title} - ${track.artist}`   //  Datapoint name\r\n            formattedData.datasets[0].data[index] =\r\n                {\r\n                    x: track.valence,\r\n                    y: track.energy\r\n                }\r\n\r\n            //  Styling according to Energy value\r\n            formattedData.datasets[0].pointBackgroundColor[index] =\r\n                determineStrengthColor(track.energy)\r\n            formattedData.datasets[0].pointBorderColor[index] = 'black'\r\n        })\r\n\r\n        return formattedData\r\n    }\r\n\r\n    let options = {\r\n        title: {\r\n            display: true,\r\n\r\n            text: 'Energy vs. Valence of Tracks',\r\n            fontColor: 'white',\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Valence',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Energy',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }]\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                //  label: Manipulates label of each data point to respective title/artist of song\r\n                label: function (item, data) {\r\n                    var label = data.labels[item.index];\r\n                    return label + ': (' + item.xLabel + ', ' + item.yLabel + ')';\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(energyVal) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - energyVal)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    return (\r\n        <div style={chartStyle}>\r\n            <Scatter data={parseData} options={options}\r\n                width={100}\r\n                height={100} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst chartStyle = {\r\n    margin: '10px',\r\n    backgroundColor: 'slategrey',\r\n    color: 'white',\r\n    borderRadius: '5px',\r\n    opacity: '0',\r\n\r\n    animation: 'initial-screen-slide-up-empty-full ease-out .5s',\r\n    animationDelay: '.75s',\r\n    animationFillMode: 'forwards'\r\n}","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist/user ID combo and submit to\r\n    retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu), Chhoden Gurung\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Particles from 'particlesjs'\r\n\r\nimport HomePage from './components/ui/HomePage';\r\nimport LoginPage from './components/ui/LoginPage';\r\nimport PlaylistPage from './components/ui/PlaylistPage';\r\nimport TrackAnalysis from './components/ui/_depreicated/TrackAnalysis';\r\nimport auth from './resources/auth.json';\r\n//* Change only if hosting elsewhere!\r\nvar baseURL = '/spotify-researcher-assistant/'\r\nvar redirectURI\r\n\r\n//*  Debugging on local server\r\nexport const _localhost = false\r\n\r\n\r\n\r\n\r\n//Retrieve access_token and redirect it to playlistPage\r\nfunction Callback() {\r\n  const urlParams = new URLSearchParams(window.location.hash.replace(/#/, ''));\r\n  let token = urlParams.get('access_token');\r\n\r\n  if (token) {\r\n    //Storing the accessToken of current session\r\n    sessionStorage.setItem('token', token);\r\n    return <Redirect to='/home' />;\r\n  } else {\r\n    return <Redirect to='/login' />;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor () {\r\n    super()\r\n\r\n    if (_localhost === true) {\r\n      console.log(`Local host mode enabled. Disiable '_localhost' before deployment.`)\r\n      baseURL = ''\r\n      redirectURI = auth.spotify.client.redirectURILocal\r\n    } else {\r\n      redirectURI = auth.spotify.client.redirectURI\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    // Load background (ParticlesJS)\r\n    window.onload = function () {\r\n      Particles.init({\r\n        selector: '.background-particles'\r\n      });\r\n    };\r\n\r\n    return (\r\n      <Router basename={baseURL}>\r\n        <canvas className=\"background-particles\"></canvas>\r\n        <script src={Particles}></script>\r\n        <Route path='/' exact render={() => <LoginPage uri={redirectURI} />} />\r\n        <Route path='/home' render={() => <HomePage scope={baseURL} />} />\r\n        <Route path='/callback' exact component={Callback} />\r\n        <Route path='/playlist/:playlistId' component={PlaylistPage} />\r\n        <Route path='/sample-playlist-visual' component={TrackAnalysis} />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/*  \r\n    Generates a page of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\n\r\n//  Internal Components\r\nimport Particles from 'particlesjs'\r\n\r\nimport './TrackAnalysis.scss'\r\nimport TrackTable from '../Analytics/TrackTable';\r\nimport TrackScatterGraph from '../Analytics/TrackScatterGraph';\r\n\r\nexport default class TrackAnalysis extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            track_data: this.props.track_data\r\n        }\r\n\r\n        this.sortBy = this.sortBy.bind(this)\r\n    }\r\n\r\n    /*  Table Functions */\r\n\r\n    sortBy = (type) => {\r\n        console.log(`Sorting by ${type}`)\r\n\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    if (typeof low[type] === 'string') return ('' + low[type]).localeCompare(high[type]);\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n\r\n        // Load background\r\n        window.onload = function () {\r\n            Particles.init({\r\n                selector: '.background-particles-alt'\r\n            });\r\n        };\r\n\r\n        return (\r\n            <div className='Analysis'>\r\n                <header className=\"App-header\" >\r\n                    <p>\r\n                        Let's learn about your music!\r\n                    </p>\r\n                </header>\r\n                <div className='App-body'>\r\n                    <TrackScatterGraph track_list={this.state.track_data} />\r\n                    <TrackTable track_list={this.state.track_data} sortBy={this.sortBy} />\r\n                    <canvas className=\"background-particles-alt\"></canvas>\r\n                    <script src={Particles}></script>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n//  Retrieve access token beforehand\r\n\r\n//  Server-side authentication\r\n//import './Auth.jsx';\r\n\r\n\r\n/* \r\nDependencies needed: \r\n    npm install:\r\n    -axios\r\n    -axios-retry\r\n    -particlesjs\r\n    -chart.js\r\n    -react-chartjs-2\r\n*/\r\n\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}