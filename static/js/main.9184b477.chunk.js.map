{"version":3,"sources":["serviceWorker.js","components/ui/TrackTable.jsx","components/ui/TrackScatterGraph.jsx","components/ui/TrackAnalysis.jsx","App.jsx","index.jsx","logo.svg","components/api/SpotifyDataHandler.jsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TrackTable","props","react_default","a","createElement","className","id","type","name","onClick","sortBy","track_list","map","track","key","title","style","backgroundColor","nrg_val","energy","artist","valence","Math","floor","duration_ms","chartStyle","margin","color","borderRadius","opacity","animation","animationDelay","animationFillMode","TrackScatterGraph","es","data","formatted_data","labels","datasets","label","x","y","pointBackgroundColor","pointBorderColor","forEach","index","concat","options","display","text","fontColor","legend","scales","xAxes","scaleLabel","labelString","ticks","beginAtZero","max","yAxes","tooltips","callbacks","item","xLabel","yLabel","width","height","TrackAnalysis","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","track_data","sort","low","high","localeCompare","render","onload","Particles","init","selector","ui_TrackScatterGraph","ui_TrackTable","src","bind","assertThisInitialized","React","Component","App","formAuthenticate","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","wrap","_context","prev","next","preventDefault","FormData","target","SpotifyDataHandler","authenticate","document","getElementById","innerHTML","t0","abrupt","user","user_id","playlist","playlist_id","generatePlaylistAnalytics","stop","_x","apply","arguments","fetchTrackData","ReactDOM","TrackAnalysis_TrackAnalysis","logo","alt","onSubmit","placeholder","required","value","onRef","ref","src_App_0","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p","Spotify","SpotifyWebAPI","authConfig","method","url","auth","spotify","access","params","grant_type","Authorization","Buffer","client","secret","toString","Content-Type","Accept","Access-Control-Allow-Origin","Access-Control-Allow-Headers","AxiosRetry","Axios","retries","D_joevi_Documents_Code_test_Apps_Challenges_interviews_spotify_researcher_assistant_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","D_joevi_Documents_Code_test_Apps_Challenges_interviews_spotify_researcher_assistant_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_joevi_Documents_Code_test_Apps_Challenges_interviews_spotify_researcher_assistant_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","D_joevi_Documents_Code_test_Apps_Challenges_interviews_spotify_researcher_assistant_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_joevi_Documents_Code_test_Apps_Challenges_interviews_spotify_researcher_assistant_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","fetchPlaylistData","length","undefined","sample","getPlaylist","err","track_ids","generateTrackIDListString","track_data_sample","audio_features","getAudioFeaturesForTracks","items","_callee2","ids_string","i","_context2","randomTrackID","_callee3","track_amount","_context3","random","componentDidMount","D_joevi_Documents_Code_test_Apps_Challenges_interviews_spotify_researcher_assistant_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7__","componentWillUnmount","request","res","setAccessToken","token","react__WEBPACK_IMPORTED_MODULE_8___default","defaultProps"],"mappings":"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","file":"static/js/main.9184b477.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*  \r\n    Generates an HTML table of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n    @date 3/16/2017\r\n*/\r\n\r\nimport React from 'react'\r\nimport './TrackTable.scss'\r\n\r\n\r\nfunction TrackTable(props) {\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(nrg_val) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    //  Display more info on a single track\r\n    function showMoreInfo() {\r\n        console.log('You clicked on a song! A future feature will replace this message!')\r\n    }\r\n\r\n    // Table of tracks displaying details of the ones in the table header.\r\n    return (\r\n        <div className='track-table'>\r\n            <table id='track-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <button type='sort' name='artist' onClick={() => props.sortBy('artist')}>\r\n                                Artist\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='title' onClick={() => props.sortBy('title')}>\r\n                                Title\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='energy' onClick={() => props.sortBy('energy')}>\r\n                                Energy\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='valence' onClick={() => props.sortBy('valence')}>\r\n                                Valence\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='seconds' onClick={() => props.sortBy('duration_ms')}>\r\n                                Seconds\r\n                            </button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.track_list.map(track =>\r\n                            (\r\n                                <tr className=\"track-table-item\" key={track.title}\r\n                                    style={{ backgroundColor: determineStrengthColor(track.energy) }}\r\n                                    onClick={() => showMoreInfo()}>\r\n                                    <td>{track.artist}</td>\r\n                                    <td>{track.title}</td>\r\n                                    <td>{track.energy}</td>\r\n                                    <td>{track.valence}</td>\r\n                                    <td>{Math.floor((track.duration_ms / 1000))}</td>\r\n                                </tr>\r\n                            )\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrackTable","/*  \r\n    Generates an interactive scatter plot of a playlist's tracks\r\n    comparing their energy and valence values.\r\n\r\n    @author Joe (joev@uw.edu)\r\n    @date 3/16/2017\r\n    @reference (https://www.chartjs.org/docs/2.8.0/)\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Scatter } from 'react-chartjs-2'\r\n\r\n\r\nfunction TrackScatterGraph(props) {\r\n\r\n\r\n    function parseData() {\r\n        //console.log('Graphing following data:', props.track_list)\r\n\r\n        // SAMPLE DATA TABLE\r\n        let formatted_data = {\r\n            labels: [\"Track 1\"],\r\n            datasets: [{\r\n                label: 'Energy vs. Valence',\r\n                backgroundColor: 'none',\r\n\r\n                data: [{\r\n                    x: .41,\r\n                    y: 0\r\n                }],\r\n\r\n                pointBackgroundColor: [\"Red\"],\r\n                pointBorderColor: [\"Black\"]\r\n            }]\r\n        }\r\n\r\n        //  Parsing data\r\n        props.track_list.forEach((track, index) => {\r\n            formatted_data.labels[index] = `${track.title} - ${track.artist}`   //  Datapoint name\r\n            formatted_data.datasets[0].data[index] =\r\n                {\r\n                    x: track.valence,\r\n                    y: track.energy\r\n                }\r\n\r\n            //  Styling according to Energy value\r\n            formatted_data.datasets[0].pointBackgroundColor[index] =\r\n                determineStrengthColor(track.energy)\r\n            formatted_data.datasets[0].pointBorderColor[index] = 'black'\r\n        })\r\n\r\n        return formatted_data\r\n    }\r\n\r\n    let options = {\r\n        title: {\r\n            display: true,\r\n\r\n            text: 'Energy vs. Valence of Tracks',\r\n            fontColor: 'white',\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Valence',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Energy',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }]\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                //  label: Manipulates label of each data point to respective title/artist of song\r\n                label: function (item, data) {\r\n                    var label = data.labels[item.index];\r\n                    return label + ': (' + item.xLabel + ', ' + item.yLabel + ')';\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(nrg_val) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    return (\r\n        <div style={chartStyle}>\r\n            <Scatter data={parseData} options={options}\r\n                width={100}\r\n                height={100} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst chartStyle = {\r\n    margin: '10px',\r\n    backgroundColor: 'slategrey',\r\n    color: 'white',\r\n    borderRadius: '5px',\r\n    opacity: '0',\r\n\r\n    animation: 'initial-screen-slide-up-empty-full ease-out .5s',\r\n    animationDelay: '.75s',\r\n    animationFillMode: 'forwards'\r\n}\r\n\r\nexport default TrackScatterGraph","/*  \r\n    Generates a page of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n    @date 3/16/2017\r\n*/\r\n\r\nimport React from 'react'\r\n\r\n//  Internal Components\r\nimport Particles from 'particlesjs'\r\n\r\nimport './TrackAnalysis.scss'\r\nimport TrackTable from './TrackTable';\r\nimport TrackScatterGraph from './TrackScatterGraph';\r\n\r\nexport default class TrackAnalysis extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            track_data: this.props.track_data\r\n        }\r\n\r\n        this.sortBy = this.sortBy.bind(this)\r\n    }\r\n\r\n    /*  Table Functions */\r\n\r\n    sortBy = (type) => {\r\n        console.log(`Sorting by ${type}`)\r\n\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    if (typeof low[type] === 'string') return ('' + low[type]).localeCompare(high[type]);\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n\r\n        // Load background\r\n        window.onload = function () {\r\n            Particles.init({\r\n                selector: '.background-particles-alt'\r\n            });\r\n        };\r\n\r\n        return (\r\n            <div className='Analysis'>\r\n                <header className=\"App-header\" >\r\n                    <p>\r\n                        Let's learn about your music!\r\n                    </p>\r\n                </header>\r\n                <div className='App-body'>\r\n                    <TrackScatterGraph track_list={this.state.track_data} />\r\n                    <TrackTable track_list={this.state.track_data} sortBy={this.sortBy} />\r\n                    <canvas className=\"background-particles-alt\"></canvas>\r\n                    <script src={Particles}></script>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","/* \n    The initial screen of the app;\n    Here the user can input a playlist/user ID combo and submit to\n    retrieve information about that playlist's tracks.\n    \n    @reference  (https://developer.spotify.com/documentation/web-api/)\n    @author     Joe Villegas (joev@uw.edu)\n    @date       3/14/19\n*/\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n//  Internal Components\nimport logo from './logo.svg'\nimport './App.css'\nimport Particles from 'particlesjs'\n\n//  External Components\nimport SpotifyDataHandler from './components/api/SpotifyDataHandler'\nimport TrackAnalysis from './components/ui/TrackAnalysis'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.formAuthenticate = this.formAuthenticate.bind(this)\n  }\n\n  formAuthenticate = async (event) => {\n    event.preventDefault()\n    const data = new FormData(event.target)\n\n    try {\n      await this.SpotifyDataHandler.authenticate()\n      document.getElementById('hint-headline').innerHTML\n        = \"Reading playlist...\"\n    } catch {\n      document.getElementById('hint-headline').innerHTML\n        = \"There seems to be an issue connecting with Spotify. Try again later.\"\n      return;\n    }\n\n    await this.SpotifyDataHandler.setState({ user: data.user_id, playlist: data.playlist_id })\n\n    this.generatePlaylistAnalytics()\n  }\n\n  generatePlaylistAnalytics = () => {\n\n    //let track_data = this.SpotifyDataHandler.fetchTrackData()       //  PRODUCTION\n\n    let track_data = this.SpotifyDataHandler.fetchTrackData('sample') //  DEBUG\n\n    ReactDOM.render(<TrackAnalysis track_data={track_data} />,\n      document.getElementById('root'))\n  }\n\n  render = () => {\n\n    // Load background (ParticlesJS)\n    window.onload = function () {\n      Particles.init({\n        selector: '.background-particles'\n      });\n    };\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n        <div className='App-body'>\n\n          <div className=\"body-text\" style={{ animation: 'text-slide-up-empty-full 1s' }}>\n            <p className=\"hello-headline\" id=\"hello-headline\">\n              <b>Hi! I'm your Spotify Researcher.</b>\n            </p>\n            <p className=\"hint-headline\" id=\"hint-headline\" style={{ animationDelay: '2s' }}>\n              Input a playlist and user ID to learn a little more about your music.\n              <br></br>\n              <br></br>\n              <i>Disclaimer: Unfortunately, fetching playlists is unavailable at the moment so a sample playlist will be used.</i>\n            </p>\n          </div>\n\n          <form className='user-form' onSubmit={this.formAuthenticate}>\n            <input type=\"text\" name=\"user_id\" placeholder=\"User ID\" required />\n            <br></br>\n            <input type=\"text\" name=\"playlist_id\" placeholder=\"Playlist ID\" required />\n            <br></br>\n            <input type=\"submit\" value=\"Get the Facts\" />\n          </form>\n\n          <canvas className=\"background-particles\"></canvas>\n          <script src={Particles}></script>\n        </div>\n\n        <SpotifyDataHandler onRef={ref => (this.SpotifyDataHandler = ref)} />\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './App';\n\n//  Retrieve access token beforehand\n// ? Did not have enough time to implement authorization and access_token retreival,\n// ? Using pre-fetched data: Spotify playlist data and user data.\n\n//  Server-side authentication\n//import './Auth.jsx';\n\n\n/* \nDependencies needed: \n    npm install:\n    -axios\n    -axios-retry\n    -particlesjs\n    -chart.js\n    -react-chartjs-2\n*/\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8499c8e5.svg\";","/* \r\n    Handles authentication and data retreival with Spotify API\r\n    For use with online React web applications.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       3/14/19\r\n*/\r\n\r\n//  Internal Components\r\nimport React from 'react'\r\nimport SpotifyWebAPI from 'spotify-web-api-js'\r\nimport Axios from 'axios'\r\nimport AxiosRetry from 'axios-retry'\r\n\r\n//  Resources\r\nimport auth from '../../resources/auth.json'   //  Must include valid IDs before methods are called\r\nimport track_list from '../../data/track_list.json'\r\nimport track_data from '../../data/track_info.json'\r\nimport track_list_sample from '../../data/track_list_sample.json'\r\nimport track_data_sample from '../../data/track_info_sample.json'\r\n\r\n\r\nconst Spotify = new SpotifyWebAPI()\r\n\r\nconst authConfig = {\r\n    method: 'post',\r\n    url: auth.spotify.access.url,\r\n    params: {\r\n        grant_type: 'client_credentials'\r\n    },\r\n    headers: {\r\n        'Authorization': 'Basic ' +\r\n            (new Buffer(auth.spotify.client.id + ':' + auth.spotify.client.secret).toString('base64')),\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Accept': 'application/json',\r\n\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'origin, x-requested-with, Content-Type, Accept'\r\n    }\r\n}\r\n\r\nAxiosRetry(Axios, { retries: 5 });  //  Retry when API calls fail\r\n\r\n\r\nclass SpotifyDataHandler extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        let TOKEN\r\n\r\n        if (TOKEN) Spotify.setAccessToken(auth.spotify.access.token)\r\n\r\n        Axios.request(authConfig)\r\n            .then(res => {\r\n                console.log(res)\r\n\r\n                Spotify.setAccessToken(auth.spotify.access.token)\r\n            })\r\n            .catch(err => (\r\n                console.log(err)\r\n            ))\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    //  Authenticate app access to Spotify Web API.\r\n    authenticate = async () => {\r\n\r\n        console.log('Hello, you interacted with the form input! :)')\r\n\r\n    }\r\n\r\n    /*   Data fetch functions   */\r\n    //  Returns Track object using specified playlist ID(s), defaults to sample ID\r\n    fetchPlaylistData = (\r\n        playlist_id = this.state.playlist_id) => {\r\n        //  When sample playlist is requested\r\n        playlist_id = 'sample' ? auth.spotify.sample.playlist_id : playlist_id\r\n\r\n        if (playlist_id === null) return console.error('User did not specify Playlist ID.')\r\n\r\n        Spotify.getPlaylist(playlist_id)\r\n            .then(data => {\r\n                track_list = data\r\n                console.log(`Received a playlist: `, data)\r\n            }, err => {\r\n                console.log(`Error fetching playlist - `, err)\r\n            })\r\n    }\r\n\r\n    //  Returns Track object(s) using specified Track ID(s), defaults to inputted playlist ID\r\n    fetchTrackData = (\r\n        track_ids = this.generateTrackIDListString()) => {\r\n        //  When sample track data is requested\r\n        if (track_ids === 'sample') return track_data_sample.audio_features\r\n\r\n        Spotify.getAudioFeaturesForTracks(track_ids)\r\n            .then(data => {\r\n                track_data = data\r\n                console.log(`Audio features for track(s): `, data)\r\n            }, err => {\r\n                console.log(`Error fetching track features - `, err)\r\n            })\r\n\r\n        let index = 0\r\n\r\n        //  Append Title and Artist to Features list\r\n        track_list.items.forEach(track => {\r\n            track_data[index++].audio_features.title = track.title\r\n            track_data[index++].audio_features.artist = track.artist\r\n        })\r\n\r\n        return track_data.audio_features\r\n    }\r\n\r\n    /*  Formatting/Generation functions */\r\n\r\n    //  Returns string of track IDs from currently populated playlist JSON\r\n    generateTrackIDListString = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        var ids_string = \"\"\r\n\r\n        for (var i = 0; i < track_list.items.length(); i++) {\r\n            ids_string += `${track_list.items[i].track.id},`\r\n        }\r\n\r\n        return ids_string\r\n    }\r\n\r\n    /*  Random data fetch functions   */\r\n\r\n    //  Returns random Track ID using an exisiting Playlist object\r\n    randomTrackID = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        let track_amount = track_list.items.length()\r\n\r\n        return track_list.items[Math.floor(Math.random() * track_amount)].track.id\r\n    }\r\n\r\n    /*  Lifecycle functions  */\r\n    componentDidMount = () => {\r\n        this.props.onRef(this)\r\n    }\r\n    componentWillUnmount = () => {\r\n        this.props.onRef(undefined)\r\n    }\r\n\r\n    //  This is a purely functional component, hence no need to return any HTML.\r\n    render() {\r\n        return (<p></p>)\r\n    }\r\n}\r\nSpotifyDataHandler.defaultProps = {\r\n\r\n}\r\n\r\nexport default SpotifyDataHandler\r\n"],"sourceRoot":""}