{"version":3,"sources":["logo.svg","serviceWorker.js","components/api/SpotifyDataHandler.jsx","components/ui/HomePage.jsx","components/ui/LoginPage.jsx","components/ui/Analytics/TrackTable.jsx","components/ui/Analytics/TrackScatterGraph.jsx","components/ui/PlaylistPage.jsx","App.jsx","components/ui/Recommendation/PlaylistRecommendationTable.jsx","components/ui/_deprecated/TrackAnalysis.jsx","index.jsx"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","api_SpotifyDataHandler","SpotifyDataHandler","token","_this","this","Object","classCallCheck","Spotify","SpotifyWebAPI","fetchPlaylistData","playlistID","arguments","length","undefined","auth","spotify","sample","getPlaylist","data","track_list","err","fetchTrackData","track_ids","generateTrackIDListString","track_data_sample","audio_features","Promise","res","rej","getAudioFeaturesForTracks","Error","concat","asyncToGenerator","regenerator_default","a","mark","_callee","ids_string","i","wrap","_context","prev","next","items","track","id","abrupt","stop","randomTrackID","_callee2","track_amount","_context2","Math","floor","random","fetchCustomizedRecommendation","_ref3","_callee3","energy","valence","artistID","_context3","getRecommendations","limit","target_energy","target_valence","seed_artists","tracks","_x","_x2","_x3","apply","componentDidMount","props","onRef","componentWillUnmount","onReady","setAccessToken","setUserInfo","accessToken","sessionStorage","setItem","user_info","getMe","result","display_name","_this2","getUserPlaylists","playlists","name","fetchPlaylists","react_default","createElement","getItem","HomePage","possibleConstructorReturn","getPrototypeOf","call","redirectToPlaylist","history","push","pathname","scope","render","dropdownPlaylists","map","playlist","Button","className","key","href","src","logo","alt","style","animation","animationDelay","onSubmit","handleSubmit","type","value","onChange","handleChange","placeholder","required","Dropdown","Toggle","variant","Menu","DropdownMenuStyle","bind","assertThisInitialized","playlistData","sent","setState","event","target","preventDefault","React","Component","overflow","height","LoginPage","clientID","client","uri","url","width","Form","horizontal","role","aria-label","FormGroup","controlId","bsStyle","TrackTable","onClick","sortBy","trackList","nrg_val","trackName","backgroundColor","tempString","artist","forEach","index","artistString","duration_ms","toLocaleString","minimumIntegerDigits","useGrouping","TrackScatterGraph","chartStyle","es","formattedData","labels","datasets","label","x","y","pointBackgroundColor","pointBorderColor","options","title","display","text","fontColor","legend","scales","xAxes","scaleLabel","labelString","ticks","beginAtZero","max","yAxes","tooltips","callbacks","item","xLabel","yLabel","recommendedPlaylist","currentPlaylist","currentPlaylistGraph","redirectURI","margin","color","borderRadius","opacity","animationFillMode","PlaylistRecommendationTable","getCurrentRecommendation","determineStrengthColor","showMoreInfo","track_data","sort","low","high","localeCompare","playlistTable","artists","external_urls","recommendedPlaylistTable","energyAverage","valenceAverage","topArtistID","_ref","resolve","reject","PlaylistPage","setRecommendedPlaylistVisible","playlistCsv","bestTrackPopularity","params","playlistId","fetchPlaylist","finalizedData","sourcePlaylist","_ref2","energyTotal","valenceTotal","filteredData","results","audioFeatures","trackID","albumName","album","albumReleaseDate","release_date","totalTracks","total_tracks","trackPopularity","popularity","artistType","danceability","speechiness","_x4","_x5","all","Analytics_TrackTable","PlaylistRecommendationTable_PlaylistRecommendationTable","jsonexport","csv","sourcePlaylistDataDownloadBtn","recommendedPlaylistTableDisplayBtn","csvHref","escape","download","document","getElementById","styles","children","marginBottom","textAlign","TrackAnalysis","onload","Particles","init","selector","baseURL","_localhost","Callback","URLSearchParams","hash","replace","get","react_router","to","App","redirectURILocal","react_router_dom","basename","path","exact","components_ui_LoginPage","components_ui_HomePage","component","ReactDOM","src_App","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83378aa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8499c8e5.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* \r\n    Handles authentication and data retreival with Spotify API\r\n    For use with online React web applications.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       3/14/19\r\n*/\r\n\r\n//  Internal Components\r\nimport React from 'react'\r\nimport SpotifyWebAPI from 'spotify-web-api-js'\r\n\r\n//  Resources\r\nimport auth from '../../resources/auth.json'   //  Must include valid IDs before methods are called\r\n\r\n//  Samples\r\nimport track_list from '../../data/track_list.json'\r\n//import track_data from '../../data/track_info.json'\r\n//import track_list_sample from '../../data/track_list_sample.json'\r\nimport track_data_sample from '../../data/track_info_sample.json'\r\nimport { Promise } from 'q';\r\n\r\n\r\nclass SpotifyDataHandler {\r\n    constructor (token) {\r\n        this.setAccessToken(token)  // Sets token across application\r\n\r\n        this.setUserInfo()\r\n    }\r\n\r\n    Spotify = new SpotifyWebAPI()\r\n\r\n\r\n    setAccessToken(accessToken) {\r\n        this.Spotify.setAccessToken(accessToken);\r\n\r\n        sessionStorage.setItem('token', accessToken);// Sets new global token\r\n\r\n        console.log('New token for Spotify set from user input!')\r\n    }\r\n\r\n    setUserInfo() {\r\n        this.user_info = this.Spotify.getMe().then((result) => {\r\n            console.log(`--- LOGGED IN AS ${result.display_name} ---`)\r\n\r\n            return result\r\n        }, error => {\r\n            if (error.result === 401) {\r\n                console.error('Could not log in. Access token invalid.')\r\n            } else if (error.result === 429) {\r\n                console.error('Too many calls. Please retry in a bit.')\r\n            } else {\r\n                console.log(`--- Could not log in to user. ---`)\r\n            }\r\n            return error\r\n        })\r\n    }\r\n\r\n    /*   Data fetch functions   */\r\n\r\n    async fetchPlaylists() {\r\n        let playlists\r\n\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getUserPlaylists(this.user_info.id, { limit: 50 })\r\n                .catch(error => {\r\n                    rej(error)\r\n                }).then((result) => {\r\n                    console.log(result)\r\n                    playlists = result.items\r\n\r\n                    res(playlists)\r\n                })\r\n        })\r\n    }\r\n\r\n    fetchPlaylist(playlistID) {\r\n        if (playlistID === null) {\r\n            return console.error('User did not specify Playlist ID.');\r\n        }\r\n\r\n        return this.Spotify.getPlaylist(playlistID)\r\n    }\r\n\r\n    async fetchPlaylistID(name) {\r\n        if (!this.playlists)\r\n            await this.fetchPlaylists()\r\n        console.log(this.playlists)\r\n\r\n        if (!name) {\r\n            console.err('Playlist ID fetching failed: No playlist info specified.')\r\n            return 'not cool'\r\n        } else {\r\n            //this.Spotify\r\n            return 'cool'\r\n        }\r\n    }\r\n\r\n    //  Returns Track object using specified playlist ID(s), defaults to sample ID\r\n    fetchPlaylistData = (\r\n        playlistID = this.state.playlistID) => {\r\n        //  When sample playlist is requested\r\n        playlistID = 'sample' ? auth.spotify.sample.playlistID : playlistID\r\n\r\n        if (playlistID === null) return console.error('User did not specify Playlist ID.')\r\n\r\n        this.Spotify.getPlaylist(playlistID)\r\n            .then(data => {\r\n                track_list = data\r\n                console.log(`Received a playlist: `, data)\r\n            }, err => {\r\n                console.log(`Error fetching playlist - `, err)\r\n            })\r\n    }\r\n\r\n    //  Returns Track object(s) using specified Track ID(s), defaults to inputted playlist ID\r\n    fetchTrackData = (\r\n        track_ids = this.generateTrackIDListString()) => {\r\n        //  When sample track data is requested\r\n        if (track_ids === 'sample') return track_data_sample.audio_features\r\n\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getAudioFeaturesForTracks(track_ids)\r\n                .then(data => {\r\n                    //.console.log(`Audio features for track `, data.audio_features[0])\r\n                    res(data.audio_features[0])\r\n                }, err => {\r\n                    rej(new Error(`Error fetching track features - ${err}`))\r\n                })\r\n        })\r\n    }\r\n\r\n    /*  Formatting/Generation functions */\r\n\r\n    //  Returns string of track IDs from currently populated playlist JSON\r\n    generateTrackIDListString = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        var ids_string = \"\"\r\n\r\n        for (var i = 0; i < track_list.items.length(); i++) {\r\n            ids_string += `${track_list.items[i].track.id},`\r\n        }\r\n\r\n        return ids_string\r\n    }\r\n\r\n    /*  Random data fetch functions   */\r\n\r\n    //  Returns random Track ID using an exisiting Playlist object\r\n    randomTrackID = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        let track_amount = track_list.items.length()\r\n\r\n        return track_list.items[Math.floor(Math.random() * track_amount)].track.id\r\n    }\r\n\r\n    /*  Customized recommendation fetchers */\r\n\r\n    // Based off a playlist's average energy, valence, and best artist. //* Version 1\r\n    fetchCustomizedRecommendation = async (energy, valence, artistID) => {\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getRecommendations({\r\n                limit: '25',\r\n                target_energy: energy,      //  Average\r\n                target_valence: valence,    //  Average\r\n                seed_artists: artistID      //  Top artist\r\n            }).then(data => {\r\n                //.console.log(data)\r\n                res(data.tracks)\r\n            }, err => {\r\n                console.error('Error fetching recommendations')\r\n                rej(err)\r\n            }\r\n            )\r\n\r\n        })\r\n\r\n    }\r\n\r\n    /*  Lifecycle functions  */\r\n    componentDidMount = () => {\r\n        this.props.onRef(this)\r\n    }\r\n    componentWillUnmount = () => {\r\n        this.props.onRef(undefined)\r\n    }\r\n\r\n    onReady = () => {\r\n        return new Promise((res, rej) => {\r\n\r\n        })\r\n    }\r\n\r\n    //  This is a purely functional component, hence no need to return any HTML.\r\n    render() {\r\n        return (<p></p>)\r\n    }\r\n}\r\n\r\nexport default new SpotifyDataHandler(sessionStorage.getItem('token'));","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist/user ID combo and submit to\r\n    retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Dropdown, Button } from 'react-bootstrap'\r\nimport SpotifyDataHandler from '../api/SpotifyDataHandler'\r\n\r\n//  Internal Components\r\nimport logo from '../../logo.svg'\r\nimport './HomePage.scss'\r\n\r\nclass HomePage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            playlistID: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        //TODO: Fix not loading on first load.\r\n        var playlistData = async () => {\r\n            let playlists = await SpotifyDataHandler.fetchPlaylists();\r\n\r\n            this.setState(() => {\r\n                return { playlists: playlists }\r\n            });\r\n        }\r\n        await playlistData()\r\n    }\r\n\r\n    redirectToPlaylist = () => {\r\n        this.props.history.push({ pathname: this.props.scope + '/playlist/' + this.state.playlistID })\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ playlistID: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.redirectToPlaylist();\r\n    }\r\n\r\n    render = () => {\r\n        var dropdownPlaylists = this.state.playlists ?\r\n\r\n            this.state.playlists.map(playlist => {\r\n                return (<Button className='btn-block'\r\n                    key={playlist.id + '-key'} href={`${this.props.scope}playlist/${playlist.id}`}\r\n                >\r\n                    {playlist.name}</Button>)\r\n            })\r\n            : 'Loading playlists'\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </header>\r\n\r\n                <div className='App-body'>\r\n\r\n                    <div className=\"body-text\" style={{ animation: 'text-slide-up-empty-full 1s' }}>\r\n                        <p className=\"hello-headline\" id=\"hello-headline\">\r\n                            <b>Hi! I'm your Spotify Researcher.</b>\r\n                        </p>\r\n                        <p className=\"hint-headline\" id=\"hint-headline\" style={{ animationDelay: '2s' }}>\r\n                            Input a playlist ID to learn a little more about your music.\r\n                            <br />\r\n                        </p>\r\n                    </div>\r\n\r\n                    <form className='user-form' onSubmit={this.handleSubmit}>\r\n                        <br />\r\n                        <input type=\"text\" value={this.state.playlistID} name=\"playlistID\"\r\n                            onChange={this.handleChange} placeholder=\"Playlist ID\" required />\r\n                        <br />\r\n                        <Dropdown id=\"dropdown-playlist\" className='fill-style'>\r\n                            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className='fill-style'>\r\n                                Select one of your playlists\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className='fill-style' style={DropdownMenuStyle} >\r\n                                {dropdownPlaylists}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <br />\r\n                        <input type=\"submit\" value=\"Get the Facts\" />\r\n                    </form>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n\r\n\r\n/* Component Styles */\r\n\r\nvar DropdownMenuStyle = {\r\n\r\n    overflow: 'auto',\r\n    height: '50vh'\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Form, FormGroup, Button } from 'react-bootstrap';\r\nimport './LoginPage.scss';\r\nimport auth from '../../resources/auth.json';\r\n\r\n\r\nclass LoginPage extends Component {\r\n    render() {\r\n        const clientID = auth.spotify.client.id;\r\n        const scope = 'user-read-private user-read-email';\r\n        console.log(this.props.uri)\r\n        const responseType = 'token';\r\n        const state = '123';\r\n\r\n        const url =\r\n            `https://accounts.spotify.com/authorize?client_id=${clientID}&redirect_uri=${this.props.uri}&scope=${scope}&response_type=${responseType}&state=${state}`\r\n        return (\r\n            <div className=\"login\" style={{ width: '-webkit-fill-available' }}>\r\n                <Form horizontal>\r\n                    <h1>\r\n                        <span role='img' aria-label='Music'>🎶</span>\r\n                        Welcome to Playlist Spotter\r\n                        <span role='img' aria-label='Music'>🎶</span>\r\n                    </h1>\r\n                    <br />\r\n                    <FormGroup controlId=\"formHorizontalEmail\">\r\n                        <h4>Sign in to Spotify to learn about your playlists and get recommendations!</h4>\r\n                        <Button bsStyle=\"success\" href={url} >Continue</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;\r\n","/*  \r\n    Generates an HTML table of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\nimport './TrackTable.scss'\r\n\r\n\r\nfunction TrackTable(props) {\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(nrg_val) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 10%)';\r\n    }\r\n\r\n    //  Display more info on a single track\r\n    function showMoreInfo() {\r\n        console.log('You clicked on a song! A future feature will replace this message!')\r\n    }\r\n\r\n    // Table of tracks displaying details of the ones in the table header.\r\n    return (\r\n        <div>\r\n            <h3>Here's some stats from your chosen playlist!</h3>\r\n            <table id='track-table' className='track-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <button type='sort' name='artist' onClick={() => props.sortBy('artist[0]')}>\r\n                                Artist\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='title' onClick={() => props.sortBy('trackName')}>\r\n                                Title\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='energy' onClick={() => props.sortBy('energy')}>\r\n                                Energy\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='valence' onClick={() => props.sortBy('valence')}>\r\n                                Valence\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='seconds' onClick={() => props.sortBy('duration_ms')}>\r\n                                Seconds\r\n                            </button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.trackList.map(track => {\r\n                            let artistString = () => {\r\n                                let tempString = \"\"\r\n\r\n                                track.artist.forEach((artist, index) => {\r\n                                    if (index === (track.artist.length - 1))\r\n                                        tempString += artist.name\r\n                                    else\r\n                                        tempString += `${artist.name}, `\r\n                                })\r\n\r\n                                return tempString\r\n                            }\r\n\r\n                            return (\r\n                                <tr className=\"track-table-item\" key={track.trackName}\r\n                                    style={{ backgroundColor: determineStrengthColor(track.energy) }}\r\n                                    onClick={() => showMoreInfo()}>\r\n                                    <td>{artistString()}</td>\r\n                                    <td>{track.trackName}</td>\r\n                                    <td>{track.energy}</td>\r\n                                    <td>{track.valence}</td>\r\n                                    <td>{`\r\n                                        ${Math.floor((track.duration_ms / 1000) / 60)}\r\n                                        :\r\n                                        ${Math.floor((track.duration_ms / 1000) % 60)\r\n                                            .toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}\r\n                                    `}</td>\r\n                                </tr>\r\n                            )\r\n\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrackTable","/*  \r\n    Generates an interactive scatter plot of a playlist's tracks\r\n    comparing their energy and valence values.\r\n\r\n    @author Joe (joev@uw.edu)\r\n    @reference (https://www.chartjs.org/docs/2.8.0/)\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Scatter } from 'react-chartjs-2'\r\n\r\n\r\nexport default function TrackScatterGraph(props) {\r\n\r\n\r\n    function parseData() {\r\n        console.log('Graphing following data:', props.trackList)\r\n\r\n        // SAMPLE DATA TABLE\r\n        let formattedData = {\r\n            labels: [\"Track 1\"],\r\n            datasets: [{\r\n                label: 'Energy vs. Valence',\r\n                backgroundColor: 'none',\r\n\r\n                data: [{\r\n                    x: .41,\r\n                    y: 0\r\n                }],\r\n\r\n                pointBackgroundColor: [\"Red\"],\r\n                pointBorderColor: [\"Black\"]\r\n            }]\r\n        }\r\n\r\n        //  Parsing data\r\n        props.trackList.forEach((track, index) => {\r\n            let artistString = () => {\r\n                let tempString = \"\"\r\n\r\n                track.artist.forEach((artist, index) => {\r\n                    if (index === (track.artist.length - 1))\r\n                        tempString += artist.name\r\n                    else\r\n                        tempString += `${artist.name}, `\r\n                })\r\n\r\n                return tempString\r\n            }\r\n\r\n            //  Datapoint name\r\n            formattedData.labels[index] = `${track.trackName} - ${artistString()}`\r\n            //  Datapoint values\r\n            formattedData.datasets[0].data[index] =\r\n                {\r\n                    x: track.valence,\r\n                    y: track.energy\r\n                }\r\n\r\n            //  Styling according to Energy value\r\n            formattedData.datasets[0].pointBackgroundColor[index] =\r\n                determineStrengthColor(track.energy)\r\n            formattedData.datasets[0].pointBorderColor[index] = 'black'\r\n        })\r\n\r\n        return formattedData\r\n    }\r\n\r\n    let options = {\r\n        title: {\r\n            display: true,\r\n\r\n            text: 'Energy vs. Valence of Tracks',\r\n            fontColor: 'white',\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Valence',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Energy',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }]\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                //  label: Manipulates label of each data point to respective title/artist of song\r\n                label: function (item, data) {\r\n                    var label = data.labels[item.index];\r\n                    return label + ': (' + item.xLabel + ', ' + item.yLabel + ')';\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(energyVal) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - energyVal)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    return (\r\n        <div style={chartStyle}>\r\n            <Scatter data={parseData} options={options}\r\n                width={100}\r\n                height={100} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst chartStyle = {\r\n    margin: '10px 10px',\r\n    color: 'white',\r\n    borderRadius: '5px',\r\n    opacity: '0',\r\n\r\n    animation: 'initial-screen-slide-up-empty-full ease-out .5s',\r\n    animationDelay: '.75s',\r\n    animationFillMode: 'forwards'\r\n}","import React from 'react';\r\nimport * as jsonexport from 'jsonexport/dist';\r\n\r\nimport SpotifyDataHandler from '../api/SpotifyDataHandler';\r\n\r\nimport TrackTable from './Analytics/TrackTable'\r\nimport TrackScatterGraph from './Analytics/TrackScatterGraph'\r\nimport PlaylistRecommendation from './Recommendation/PlaylistRecommendationTable'\r\n\r\n// Component\r\nimport { Button } from 'react-bootstrap';\r\nlet recommendedPlaylist, currentPlaylist, currentPlaylistGraph\r\n\r\nclass PlaylistPage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            playlist: null,\r\n            playlistCsv: null,\r\n\r\n            //  Number values\r\n            energyAverage: null,\r\n            valenceAverage: null,\r\n            topArtistID: null,\r\n            bestTrackPopularity: null\r\n\r\n        }\r\n    }\r\n\r\n    sortBy = (type) => {\r\n        console.log(type)\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        let playlistID = this.props.match.params.playlistId;\r\n        switch (playlistID) {\r\n            case 'Discover Weekly':\r\n                playlistID = 'discover_weekly_placeholder'\r\n                // TODO: Regex search Discover Weekly using DataHandler\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        SpotifyDataHandler.fetchPlaylist(playlistID).then(async playlist => {\r\n            this.setState(() => ({ sourcePlaylist: playlist }))\r\n\r\n            // Filter JSON data\r\n            const finalizedData = await new Promise(async (resolve, reject) => {\r\n\r\n                //  Total audio values\r\n                let energyTotal = 0, valenceTotal = 0\r\n\r\n                let filteredData = playlist.tracks.items.map(async (item, index) => {\r\n                    //.console.log(item.track)\r\n                    let audioFeatures = await SpotifyDataHandler.fetchTrackData(item.track.id)\r\n\r\n                    energyTotal += audioFeatures.energy\r\n                    valenceTotal += audioFeatures.valence\r\n\r\n\r\n                    //  Calculating averages\r\n                    if (index === playlist.tracks.items.length - 1)\r\n                        this.setState(() => ({\r\n                            energyAverage: (energyTotal / filteredData.length),\r\n                            valenceAverage: (valenceTotal / filteredData.length)\r\n                        }))\r\n\r\n\r\n                    return {\r\n\r\n                        //  Core track data\r\n                        trackID: item.track.id,\r\n                        albumName: item.track.album.name,\r\n                        albumReleaseDate: item.track.album.release_date,\r\n                        totalTracks: item.track.album.total_tracks,\r\n                        trackName: item.track.name,\r\n                        trackPopularity: item.track.popularity,\r\n                        artist: item.track.artists.map(artist => {\r\n                            if (item.track.popularity > this.state.bestTrackPopularity) {\r\n                                this.setState({ bestTrackPopularity: item.track.popularity })\r\n                                this.state.topArtistID = artist.id\r\n                            }\r\n                            return {\r\n                                name: artist.name,\r\n                                artistType: artist.type\r\n                            }\r\n                        }),\r\n\r\n                        //  Audio metrics (basic)\r\n                        duration_ms: item.track.duration_ms,\r\n\r\n                        //  Audio metrics (advanced)\r\n\r\n                        energy: audioFeatures.energy,\r\n                        valence: audioFeatures.valence,\r\n                        danceability: audioFeatures.danceability,\r\n                        speechiness: audioFeatures.speechiness\r\n\r\n                    }\r\n                })\r\n\r\n                const results = await Promise.all(filteredData)\r\n\r\n                console.log(`Playlist's tracks' data resolved`)\r\n                console.log(results)\r\n                resolve(results)\r\n            })\r\n            this.setState({ playlist: finalizedData })\r\n\r\n            //  Generate scatter graph of current playlist's data\r\n            if (this.state.playlist) {\r\n                //* Edit recommendation parameters here\r\n                currentPlaylist = (<TrackTable trackList={this.state.playlist} sortBy={this.sortBy} />)\r\n                currentPlaylistGraph = (<TrackScatterGraph trackList={this.state.playlist} />)\r\n            } else {\r\n                currentPlaylist = (<p>Loading graph...</p>)\r\n            }\r\n\r\n\r\n\r\n            console.log(\r\n                `Best artist's ID: ${this.state.topArtistID}\r\n                \\nAverage valence: ${this.state.valenceAverage}\r\n                \\nAverage energy: ${this.state.energyAverage}`)\r\n\r\n            // Generate playlist recommendation with given specific variables\r\n            if (this.state.energyAverage) {\r\n                //* Edit recommendation parameters here\r\n                recommendedPlaylist = (\r\n                    <PlaylistRecommendation\r\n                        energyAverage={this.state.energyAverage}\r\n                        valenceAverage={this.state.valenceAverage}\r\n                        topArtistID={this.state.topArtistID}>\r\n                    </PlaylistRecommendation>)\r\n                //!await this.setState({ recommendedPlaylist: recommendedPlaylist.state })\r\n            } else {\r\n                recommendedPlaylist = (<p>Loading recommendations...</p>)\r\n            }\r\n\r\n            // Export source playlist's data (user-defined) to CSV.\r\n            jsonexport(finalizedData, (err, csv) => {\r\n                if (err) return console.log(err);\r\n\r\n                console.log(`CSV file of playlist ${playlistID} created.`)\r\n                //.console.log(csv)\r\n\r\n                this.setState({ playlistCsv: csv })\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const csvHref = `data:text/csv;charset=utf-8,${escape(this.state.playlistCsv)}`\r\n        let sourcePlaylistDataDownloadBtn, recommendedPlaylistTableDisplayBtn\r\n\r\n        //TODO: Include graphing visuals (plug in TrackScatterGraph)\r\n        if (this.state.sourcePlaylist)\r\n            sourcePlaylistDataDownloadBtn = (\r\n                <Button href={csvHref}\r\n                    download=\"playlist_data.csv\"\r\n                    variant='dark'>\r\n                    CSV file of {this.state.sourcePlaylist.name}'s track data\r\n                </Button >)\r\n\r\n        if (recommendedPlaylist)\r\n            recommendedPlaylistTableDisplayBtn = (\r\n                <Button onClick={() => { document.getElementById('recommended-playlist-table').style.display = 'block' }}\r\n                    style={{ color: 'white', backgroundColor: 'darkslategray' }}>\r\n                    What would you recommend me?\r\n            </Button >)\r\n\r\n        return (\r\n            <div style={styles} >\r\n                <h1>Incoming playlist data!</h1>\r\n                {this.props.children}\r\n\r\n                <div className='playlist-action-buttons' style={{ marginBottom: '16px' }}>\r\n                    {recommendedPlaylistTableDisplayBtn}\r\n                    {sourcePlaylistDataDownloadBtn}\r\n                </div>\r\n                {recommendedPlaylist}\r\n                {currentPlaylist}\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgb(40,40,40)',\r\n                    borderRadius: '10px',\r\n                    width: '90vw', margin: '0 auto',\r\n                }}>\r\n                    {currentPlaylistGraph}\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n    setRecommendedPlaylistVisible = () => {\r\n\r\n    }\r\n}\r\n\r\nvar styles = {\r\n    textAlign: 'center',\r\n    color: 'white'\r\n}\r\n\r\nexport default PlaylistPage;\r\n\r\n","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist/user ID combo and submit to\r\n    retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu), Chhoden Gurung\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Particles from 'particlesjs'\r\n\r\nimport HomePage from './components/ui/HomePage';\r\nimport LoginPage from './components/ui/LoginPage';\r\nimport PlaylistPage from './components/ui/PlaylistPage';\r\nimport TrackAnalysis from './components/ui/_deprecated/TrackAnalysis';\r\nimport auth from './resources/auth.json';\r\n//* Change only if hosting elsewhere!\r\nvar baseURL = '/spotify-researcher-assistant/'\r\nvar redirectURI\r\n\r\n//*  Debugging on local server\r\nexport const _localhost = false\r\n\r\n\r\n\r\n\r\n//Retrieve access_token and redirect it to playlistPage\r\nfunction Callback() {\r\n  const urlParams = new URLSearchParams(window.location.hash.replace(/#/, ''));\r\n  let token = urlParams.get('access_token');\r\n\r\n  if (token) {\r\n    //Storing the accessToken of current session\r\n    sessionStorage.setItem('token', token);\r\n    return <Redirect to='/home' />;\r\n  } else {\r\n    return <Redirect to='/login' />;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor () {\r\n    super()\r\n\r\n    if (_localhost === true) {\r\n      console.log(`Local host mode enabled. Disiable '_localhost' before deployment.`)\r\n      baseURL = ''\r\n      redirectURI = auth.spotify.client.redirectURILocal\r\n    } else {\r\n      redirectURI = auth.spotify.client.redirectURI\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    // Load background (ParticlesJS)\r\n    window.onload = function () {\r\n      Particles.init({\r\n        selector: '.background-particles'\r\n      });\r\n    };\r\n\r\n    return (\r\n      <div className='viewstyle'>\r\n        <Router basename={baseURL}>\r\n          <canvas className=\"background-particles\"></canvas>\r\n          <script src={Particles}></script>\r\n          <Route path='/' exact render={() => <LoginPage uri={redirectURI} />} />\r\n          <Route path='/home' render={() => <HomePage scope={baseURL} />} />\r\n          <Route path='/callback' exact component={Callback} />\r\n          <Route path='/playlist/:playlistId' component={PlaylistPage} />\r\n          <Route path='/sample-playlist-visual' component={TrackAnalysis} />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/*  \r\n    Generates an HTML table of a playlist recommendation\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\n\r\nimport SpotifyDataHandler from '../../api/SpotifyDataHandler'\r\n\r\nimport './PlaylistRecommendationTable.scss'\r\n\r\nexport default class PlaylistRecommendationTable extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            recommendedPlaylistTable: (<p>'asdas'</p>)\r\n        }\r\n\r\n        //TODO: Add sorting function\r\n        this.sortBy = this.sortBy.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //* See function to customize parameters\r\n        SpotifyDataHandler.fetchCustomizedRecommendation(\r\n            this.props.energyAverage, this.props.valenceAverage, this.props.topArtistID)\r\n            .then(async tracks => {\r\n                await new Promise((resolve, reject) => {\r\n                    this.setState(() => ({\r\n                        recommendedPlaylist: tracks\r\n                    }))\r\n\r\n                    //.console.log(resolve)\r\n                })\r\n            })\r\n    }\r\n\r\n    getCurrentRecommendation = () => {\r\n        return this.state.recommendedPlaylist\r\n    }\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    determineStrengthColor = (nrg_val) => {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    //  Display more info on a single track\r\n    showMoreInfo = () => {\r\n        console.log('You clicked on a song! A future feature will replace this message!')\r\n    }\r\n\r\n    sortBy = (type) => {\r\n        console.log(`Sorting by ${type}`)\r\n\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    if (typeof low[type] === 'string') return ('' + low[type]).localeCompare(high[type]);\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n    // Table of tracks displaying details of the ones in the table header.\r\n    render = () => {\r\n        //.console.log(this.state.recommendedPlaylist)\r\n\r\n        let playlistTable\r\n        if (this.state.recommendedPlaylist) {\r\n\r\n            playlistTable =\r\n                (<tbody>\r\n                    {\r\n                        this.state.recommendedPlaylist.map(track =>\r\n                            (\r\n                                <tr className=\"track-table-item\" key={`item-${track.id}`}\r\n                                    style={{ backgroundColor: this.determineStrengthColor(track.energy) }}>\r\n                                    <td className='artist-text'>\r\n                                        {\r\n                                            track.artists.map((artist, index) => {\r\n                                                if (index === track.artists.length - 1)\r\n                                                    return (<a href={artist.external_urls.spotify} key={`item-${artist.id}`}>\r\n                                                        {artist.name}\r\n                                                    </a>)\r\n\r\n                                                return (<a href={artist.external_urls.spotify} key={`item-${artist.id}`}>\r\n                                                    {artist.name},{' '}\r\n                                                </a>)\r\n                                            }\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                    <td className='title-text'>\r\n                                        <a href={track.external_urls.spotify}>\r\n                                            {track.name}\r\n                                        </a>\r\n                                    </td>\r\n                                    <td className='length-text'>{`\r\n                                        ${Math.floor((track.duration_ms / 1000) / 60)}\r\n                                        :\r\n                                        ${Math.floor((track.duration_ms / 1000) % 60)\r\n                                            .toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}\r\n                                    `}</td>\r\n                                </tr>\r\n                            )\r\n                        )\r\n                    }\r\n                </tbody>)\r\n\r\n\r\n            console.log('Generated recommended playlist off custom queries!')\r\n        }\r\n\r\n\r\n        if (playlistTable)\r\n            return (\r\n                <div id='recommended-playlist-table' style={{ display: 'none', animationDelay: '0ms' }}>\r\n                    <h3>Here's some recommendations for you!</h3>\r\n                    <table className='track-table' >\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <button type='sort' name='artist' onClick={() => this.state.sortBy('artist')}>\r\n                                        Artist\r\n                                    </button>\r\n                                </th>\r\n                                <th>\r\n                                    <button type='sort' name='title' onClick={() => this.state.sortBy('title')}>\r\n                                        Title\r\n                                    </button>\r\n                                </th>\r\n                                <th>\r\n                                    <button type='sort' name='seconds' onClick={() => this.state.sortBy('duration_ms')}>\r\n                                        Length\r\n                                    </button>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        {playlistTable}\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            )\r\n        else\r\n            return (<p>Loading recommendations...</p>)\r\n    }\r\n}","/*  \r\n    Generates a page of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\n\r\n//  Internal Components\r\nimport Particles from 'particlesjs'\r\n\r\nimport './TrackAnalysis.scss'\r\nimport TrackTable from '../Analytics/TrackTable';\r\nimport TrackScatterGraph from '../Analytics/TrackScatterGraph';\r\n\r\nexport default class TrackAnalysis extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            track_data: this.props.track_data\r\n        }\r\n\r\n        this.sortBy = this.sortBy.bind(this)\r\n    }\r\n\r\n    /*  Table Functions */\r\n\r\n    sortBy = (type) => {\r\n        console.log(`Sorting by ${type}`)\r\n\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    if (typeof low[type] === 'string') return ('' + low[type]).localeCompare(high[type]);\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n\r\n        // Load background\r\n        window.onload = function () {\r\n            Particles.init({\r\n                selector: '.background-particles-alt'\r\n            });\r\n        };\r\n\r\n        return (\r\n            <div className='Analysis'>\r\n                <header className=\"App-header\" >\r\n                    <p>\r\n                        Let's learn about your music!\r\n                    </p>\r\n                </header>\r\n                <div className='App-body'>\r\n                    <TrackScatterGraph track_list={this.state.track_data} />\r\n                    <TrackTable track_list={this.state.track_data} sortBy={this.sortBy} />\r\n                    <canvas className=\"background-particles-alt\"></canvas>\r\n                    <script src={Particles}></script>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n//  Retrieve access token beforehand\r\n\r\n//  Server-side authentication\r\n//import './Auth.jsx';\r\n\r\n\r\n/* \r\nDependencies needed: \r\n    npm install:\r\n    -axios\r\n    -axios-retry\r\n    -particlesjs\r\n    -chart.js\r\n    -react-chartjs-2\r\n*/\r\n\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}