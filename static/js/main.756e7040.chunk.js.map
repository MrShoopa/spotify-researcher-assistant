{"version":3,"sources":["logo.svg","serviceWorker.js","components/api/SpotifyDataHandler.jsx","components/ui/HomePage.jsx","components/ui/LoginPage.jsx","components/ui/Playlist/Analytics/TrackTable.jsx","components/ui/Playlist/Analytics/TrackScatterGraph.jsx","components/ui/Playlist/PlaylistPage.jsx","App.jsx","components/ui/Playlist/Recommendation/PlaylistRecommendationTable.jsx","_deprecated/ui/TrackAnalysis.jsx","index.jsx"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","api_SpotifyDataHandler","SpotifyDataHandler","token","_this","this","Object","classCallCheck","Spotify","SpotifyWebAPI","fetchPlaylistData","playlistID","arguments","length","undefined","auth","spotify","sample","getPlaylist","data","track_list","err","fetchTrackData","track_ids","generateTrackIDListString","track_data_sample","audio_features","Promise","res","rej","getAudioFeaturesForTracks","Error","concat","asyncToGenerator","regenerator_default","a","mark","_callee","ids_string","i","wrap","_context","prev","next","items","track","id","abrupt","stop","randomTrackID","_callee2","track_amount","_context2","Math","floor","random","fetchCustomizedRecommendation","_ref3","_callee3","energy","valence","artistID","_context3","getRecommendations","limit","target_energy","target_valence","seed_artists","tracks","_x","_x2","_x3","apply","componentDidMount","props","onRef","componentWillUnmount","onReady","setAccessToken","setUserInfo","accessToken","sessionStorage","setItem","user_info","getMe","result","display_name","_this2","getUserPlaylists","playlists","name","fetchPlaylists","matchedPlaylist","find","playlist","react_default","createElement","getItem","HomePage","possibleConstructorReturn","getPrototypeOf","call","redirectToPlaylist","history","push","pathname","scope","render","dropdownPlaylists","map","Button","className","key","href","src","logo","alt","style","animation","animationDelay","onSubmit","handleSubmit","type","value","onChange","handleChange","placeholder","required","Dropdown","Toggle","variant","Menu","DropdownMenuStyle","bind","assertThisInitialized","playlistData","sent","setState","event","target","preventDefault","React","Component","overflow","height","LoginPage","clientID","client","url","uri","width","Form","horizontal","role","aria-label","FormGroup","controlId","bsStyle","TrackTable","onClick","sortBy","trackList","nrg_val","trackName","backgroundColor","tempString","artist","forEach","index","artistString","duration_ms","toLocaleString","minimumIntegerDigits","useGrouping","TrackScatterGraph","chartStyle","es","formattedData","labels","datasets","label","x","y","pointBackgroundColor","pointBorderColor","options","title","display","text","fontColor","legend","scales","xAxes","scaleLabel","labelString","ticks","beginAtZero","max","yAxes","tooltips","callbacks","item","xLabel","yLabel","recommendedPlaylist","currentPlaylist","currentPlaylistGraph","redirectURI","baseURL","margin","color","borderRadius","opacity","animationFillMode","PlaylistRecommendationTable","getCurrentRecommendation","determineStrengthColor","showMoreInfo","track_data","sort","low","high","localeCompare","playlistTable","artists","external_urls","recommendedPlaylistTable","energyAverage","valenceAverage","topArtistID","_ref","resolve","reject","PlaylistPage","setRecommendedPlaylistVisible","playlistCsv","bestTrackPopularity","params","playlistId","fetchPlaylist","finalizedData","sourcePlaylist","_ref2","energyTotal","valenceTotal","filteredData","results","audioFeatures","trackID","albumName","album","albumReleaseDate","release_date","totalTracks","total_tracks","trackPopularity","popularity","artistType","danceability","speechiness","_x4","_x5","all","Analytics_TrackTable","PlaylistRecommendationTable_PlaylistRecommendationTable","jsonexport","csv","sourcePlaylistDataDownloadBtn","recommendedPlaylistTableDisplayBtn","csvHref","escape","download","document","getElementById","styles","children","textAlign","TrackAnalysis","onload","Particles","init","selector","Callback","URLSearchParams","hash","replace","get","react_router","to","App","localhost","redirectURILocal","react_router_dom","basename","path","exact","LoginPage_LoginPage","HomePage_HomePage","component","ReactDOM","src_App_0","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.756e7040.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2cacfe33.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/* \r\n    Handles authentication and data retreival with Spotify API\r\n    For use with online React web applications.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       3/14/19\r\n*/\r\n\r\n//  Internal Components\r\nimport React from 'react'\r\nimport SpotifyWebAPI from 'spotify-web-api-js'\r\n\r\n//  Resources\r\nimport auth from '../../resources/auth.json'   //  Must include valid IDs before methods are called\r\n\r\n//  Samples\r\nimport track_list from '../../data/track_list.json'\r\n//import track_data from '../../data/track_info.json'\r\n//import track_list_sample from '../../data/track_list_sample.json'\r\nimport track_data_sample from '../../data/track_info_sample.json'\r\n\r\n\r\nclass SpotifyDataHandler {\r\n    constructor (token) {\r\n        this.setAccessToken(token)  // Sets token across application\r\n\r\n        this.setUserInfo()\r\n    }\r\n\r\n    Spotify = new SpotifyWebAPI()\r\n\r\n\r\n    setAccessToken(accessToken) {\r\n        this.Spotify.setAccessToken(accessToken);\r\n\r\n        sessionStorage.setItem('token', accessToken);// Sets new global token\r\n\r\n        console.log('New token for Spotify set from user input!')\r\n    }\r\n\r\n    setUserInfo() {\r\n        this.user_info = this.Spotify.getMe().then((result) => {\r\n            console.log(`--- LOGGED IN AS ${result.display_name} ---`)\r\n\r\n            return result\r\n        }, error => {\r\n            if (error.result === 401) {\r\n                console.error('Could not log in. Access token invalid.')\r\n            } else if (error.result === 429) {\r\n                console.error('Too many API calls. Please retry in a bit.')\r\n            } else {\r\n                console.log(`--- Could not log in to user. ---`)\r\n            }\r\n            return error\r\n        })\r\n    }\r\n\r\n    /*   Data fetch functions   */\r\n\r\n    async fetchPlaylists() {\r\n        let playlists\r\n\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getUserPlaylists(this.user_info.id, { limit: 50 })\r\n                .catch(error => {\r\n                    rej(error)\r\n                }).then((result) => {\r\n                    console.log(result)\r\n                    playlists = result.items\r\n\r\n                    res(playlists)\r\n                })\r\n        })\r\n    }\r\n\r\n    fetchPlaylist(playlistID) {\r\n        if (playlistID === null) {\r\n            return console.error('User did not specify Playlist ID.');\r\n        }\r\n\r\n        return this.Spotify.getPlaylist(playlistID)\r\n    }\r\n\r\n    async fetchPlaylistID(name) {\r\n        let playlists\r\n\r\n        if (!this.playlists)\r\n            playlists = await this.fetchPlaylists()\r\n        console.log(this.playlists)\r\n\r\n        if (!name) {\r\n            console.err('Playlist ID fetching failed: No playlist name specified.')\r\n            return undefined\r\n        } else {\r\n            let matchedPlaylist = playlists.find(playlist => {\r\n                return playlists.name = name\r\n            })\r\n\r\n            if (matchedPlaylist) return matchedPlaylist\r\n        }\r\n    }\r\n\r\n    //  Returns Track object using specified playlist ID(s), defaults to sample ID\r\n    fetchPlaylistData = (\r\n        playlistID = this.state.playlistID) => {\r\n        //  When sample playlist is requested\r\n        playlistID = 'sample' ? auth.spotify.sample.playlistID : playlistID\r\n\r\n        if (playlistID === null) return console.error('User did not specify Playlist ID.')\r\n\r\n        this.Spotify.getPlaylist(playlistID)\r\n            .then(data => {\r\n                track_list = data\r\n                console.log(`Received a playlist: `, data)\r\n            }, err => {\r\n                console.log(`Error fetching playlist - `, err)\r\n            })\r\n    }\r\n\r\n    //  Returns Track object(s) using specified Track ID(s), defaults to inputted playlist ID\r\n    fetchTrackData = (\r\n        track_ids = this.generateTrackIDListString()) => {\r\n        //  When sample track data is requested\r\n        if (track_ids === 'sample') return track_data_sample.audio_features\r\n\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getAudioFeaturesForTracks(track_ids)\r\n                .then(data => {\r\n                    //.console.log(`Audio features for track `, data.audio_features[0])\r\n                    res(data.audio_features[0])\r\n                }, err => {\r\n                    rej(new Error(`Error fetching track features - ${err}`))\r\n                })\r\n        })\r\n    }\r\n\r\n    /*  Formatting/Generation functions */\r\n\r\n    //  Returns string of track IDs from currently populated playlist JSON\r\n    generateTrackIDListString = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        var ids_string = \"\"\r\n\r\n        for (var i = 0; i < track_list.items.length(); i++) {\r\n            ids_string += `${track_list.items[i].track.id},`\r\n        }\r\n\r\n        return ids_string\r\n    }\r\n\r\n    /*  Random data fetch functions   */\r\n\r\n    //  Returns random Track ID using an exisiting Playlist object\r\n    randomTrackID = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        let track_amount = track_list.items.length()\r\n\r\n        return track_list.items[Math.floor(Math.random() * track_amount)].track.id\r\n    }\r\n\r\n    /*  Customized recommendation fetchers */\r\n\r\n    // Based off a playlist's average energy, valence, and best artist. //* Version 1\r\n    fetchCustomizedRecommendation = async (energy, valence, artistID) => {\r\n        return new Promise((res, rej) => {\r\n            this.Spotify.getRecommendations({\r\n                limit: '25',\r\n                target_energy: energy,      //  Average\r\n                target_valence: valence,    //  Average\r\n                seed_artists: artistID      //  Top artist\r\n            }).then(data => {\r\n                //.console.log(data)\r\n                res(data.tracks)\r\n            }, err => {\r\n                console.error('Error fetching recommendations')\r\n                rej(err)\r\n            }\r\n            )\r\n\r\n        })\r\n\r\n    }\r\n\r\n    /*  Lifecycle functions  */\r\n    componentDidMount = () => {\r\n        this.props.onRef(this)\r\n    }\r\n    componentWillUnmount = () => {\r\n        this.props.onRef(undefined)\r\n    }\r\n\r\n    onReady = () => {\r\n        return new Promise((res, rej) => {\r\n\r\n        })\r\n    }\r\n\r\n    //  This is a purely functional component, hence no need to return any HTML.\r\n    render() {\r\n        return (<p></p>)\r\n    }\r\n}\r\n\r\nexport default new SpotifyDataHandler(sessionStorage.getItem('token'));","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist ID from Spotify,\r\n    then submit to retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Dropdown, Button } from 'react-bootstrap'\r\nimport SpotifyDataHandler from '../api/SpotifyDataHandler'\r\n\r\n//  Internal Components\r\nimport './HomePage.scss'\r\n\r\nimport logo from '../../logo.svg'\r\n\r\nexport default class HomePage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            playlistID: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // Start loading available playlists of user on page load.\r\n\r\n        //TODO: Fix not loading on first load.\r\n        var playlistData = async () => {\r\n            let playlists = await SpotifyDataHandler.fetchPlaylists();\r\n\r\n            this.setState(() => {\r\n                return { playlists: playlists }\r\n            });\r\n        }\r\n        await playlistData()\r\n    }\r\n\r\n    redirectToPlaylist = () => {\r\n        this.props.history.push({ pathname: this.props.scope + '/playlist/' + this.state.playlistID })\r\n    }\r\n\r\n    handleChange(event) {\r\n        // Fetches playlist ID on playlist select\r\n        this.setState({ playlistID: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        // Fetches playlist ID on playlist ID input\r\n        event.preventDefault();\r\n        this.redirectToPlaylist();\r\n    }\r\n\r\n    render = () => {\r\n        // Renders dropdown of user's playlist when loaded\r\n        var dropdownPlaylists = this.state.playlists ?\r\n            this.state.playlists.map(playlist => {\r\n                return (<Button className='btn-block'\r\n                    key={playlist.id + '-key'} href={`${this.props.scope}playlist/${playlist.id}`}\r\n                >\r\n                    {playlist.name}</Button>)\r\n            })\r\n            : 'Loading playlists'   //  Loading...\r\n\r\n        //  Renders home page.\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </header>\r\n\r\n                <div className='App-body'>\r\n\r\n                    <div className=\"body-text\" style={{ animation: 'text-slide-up-empty-full 1s' }}>\r\n                        <p className=\"hello-headline\" id=\"hello-headline\">\r\n                            <b>Hi! I'm your Spotify Researcher.</b>\r\n                        </p>\r\n                        <p className=\"hint-headline\" id=\"hint-headline\" style={{ animationDelay: '2s' }}>\r\n                            Input a playlist ID to learn a little more about your music.\r\n                            <br />\r\n                        </p>\r\n                    </div>\r\n\r\n                    <form className='user-form' onSubmit={this.handleSubmit}>\r\n                        <br />\r\n                        <input type=\"text\" value={this.state.playlistID} name=\"playlistID\"\r\n                            onChange={this.handleChange} placeholder=\"Playlist ID\" required />\r\n                        <br />\r\n                        <Dropdown id=\"dropdown-playlist\" className='fill-style'>\r\n                            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className='fill-style'>\r\n                                Select one of your playlists\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className='fill-style' style={DropdownMenuStyle} >\r\n                                {dropdownPlaylists}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <br />\r\n                        <input type=\"submit\" value=\"Get the Facts\" />\r\n                    </form>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n/* Component Styles */\r\n\r\nvar DropdownMenuStyle = {\r\n\r\n    overflow: 'auto',\r\n    height: '50vh'\r\n\r\n}\r\n","/* \r\n    Page that handles user login. Prompts user with a sign in button\r\n    which redirects them to Spotify's auth screen to let the app\r\n    have access to Spotify user data locally.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       5/30/19\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport { Form, FormGroup, Button } from 'react-bootstrap';\r\n\r\nimport './LoginPage.scss';\r\n\r\nimport auth from '../../resources/auth.json';\r\n\r\n\r\nexport default class LoginPage extends Component {\r\n    render() {\r\n        //  Authentication and permission parameters\r\n        const clientID = auth.spotify.client.id;\r\n        const scope = 'user-read-private user-read-email';\r\n        const responseType = 'token';\r\n        const state = '123';\r\n\r\n        //.console.log(this.props.uri)\r\n\r\n        //  Authentication URL\r\n        const url =\r\n            `https://accounts.spotify.com/authorize?client_id=${clientID}&redirect_uri=${this.props.uri}&scope=${scope}&response_type=${responseType}&state=${state}`\r\n\r\n        return (\r\n            <div className=\"login\" style={{ width: '-webkit-fill-available' }}>\r\n                <Form horizontal>\r\n                    <h1>\r\n                        <span role='img' aria-label='Music'>🎶</span>\r\n                        Welcome to Playlist Spotter\r\n                        <span role='img' aria-label='Music'>🎶</span>\r\n                    </h1>\r\n                    <br />\r\n                    <FormGroup controlId=\"formHorizontalEmail\">\r\n                        <h4>Sign in to Spotify to learn about your playlists and get recommendations!</h4>\r\n                        <Button bsStyle=\"success\" href={url} >Continue</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}","/*  \r\n    Generates an HTML table of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\nimport './TrackTable.scss'\r\n\r\n\r\nfunction TrackTable(props) {\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(nrg_val) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 10%)';\r\n    }\r\n\r\n    //  Display more info on a single track\r\n    function showMoreInfo() {\r\n        console.log('You clicked on a song! A future feature will replace this message!')\r\n    }\r\n\r\n    // Table of tracks displaying details of the ones in the table header.\r\n    return (\r\n        <div>\r\n            <h4>Here's some stats from your chosen playlist!</h4>\r\n            <table id='track-table' className='track-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <button type='sort' name='artist' onClick={() => props.sortBy('artist[0]')}>\r\n                                Artist\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='title' onClick={() => props.sortBy('trackName')}>\r\n                                Title\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='energy' onClick={() => props.sortBy('energy')}>\r\n                                Energy\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='valence' onClick={() => props.sortBy('valence')}>\r\n                                Valence\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button type='sort' name='seconds' onClick={() => props.sortBy('duration_ms')}>\r\n                                Seconds\r\n                            </button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.trackList.map(track => {\r\n                            let artistString = () => {\r\n                                let tempString = \"\"\r\n\r\n                                track.artist.forEach((artist, index) => {\r\n                                    if (index === (track.artist.length - 1))\r\n                                        tempString += artist.name\r\n                                    else\r\n                                        tempString += `${artist.name}, `\r\n                                })\r\n\r\n                                return tempString\r\n                            }\r\n\r\n                            return (\r\n                                <tr className=\"track-table-item\" key={track.trackName}\r\n                                    style={{ backgroundColor: determineStrengthColor(track.energy) }}\r\n                                    onClick={() => showMoreInfo()}>\r\n                                    <td>{artistString()}</td>\r\n                                    <td>{track.trackName}</td>\r\n                                    <td>{track.energy}</td>\r\n                                    <td>{track.valence}</td>\r\n                                    <td>{`\r\n                                        ${Math.floor((track.duration_ms / 1000) / 60)}\r\n                                        :\r\n                                        ${Math.floor((track.duration_ms / 1000) % 60)\r\n                                            .toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}\r\n                                    `}</td>\r\n                                </tr>\r\n                            )\r\n\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrackTable","/*  \r\n    Generates an interactive scatter plot of a playlist's tracks\r\n    comparing their energy and valence values.\r\n\r\n    @author Joe (joev@uw.edu)\r\n    @reference (https://www.chartjs.org/docs/2.8.0/)\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Scatter } from 'react-chartjs-2'\r\n\r\n\r\nexport default function TrackScatterGraph(props) {\r\n\r\n\r\n    function parseData() {\r\n        console.log('Graphing following data:', props.trackList)\r\n\r\n        // SAMPLE DATA TABLE\r\n        let formattedData = {\r\n            labels: [\"Track 1\"],\r\n            datasets: [{\r\n                label: 'Energy vs. Valence',\r\n                backgroundColor: 'none',\r\n\r\n                data: [{\r\n                    x: .41,\r\n                    y: 0\r\n                }],\r\n\r\n                pointBackgroundColor: [\"Red\"],\r\n                pointBorderColor: [\"Black\"]\r\n            }]\r\n        }\r\n\r\n        //  Parsing data\r\n        props.trackList.forEach((track, index) => {\r\n            let artistString = () => {\r\n                let tempString = \"\"\r\n\r\n                track.artist.forEach((artist, index) => {\r\n                    if (index === (track.artist.length - 1))\r\n                        tempString += artist.name\r\n                    else\r\n                        tempString += `${artist.name}, `\r\n                })\r\n\r\n                return tempString\r\n            }\r\n\r\n            //  Datapoint name\r\n            formattedData.labels[index] = `${track.trackName} - ${artistString()}`\r\n            //  Datapoint values\r\n            formattedData.datasets[0].data[index] =\r\n                {\r\n                    x: track.valence,\r\n                    y: track.energy\r\n                }\r\n\r\n            //  Styling according to Energy value\r\n            formattedData.datasets[0].pointBackgroundColor[index] =\r\n                determineStrengthColor(track.energy)\r\n            formattedData.datasets[0].pointBorderColor[index] = 'black'\r\n        })\r\n\r\n        return formattedData\r\n    }\r\n\r\n    let options = {\r\n        title: {\r\n            display: true,\r\n\r\n            text: 'Energy vs. Valence of Tracks',\r\n            fontColor: 'white',\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Valence',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n\r\n                    labelString: 'Energy',\r\n                    fontColor: 'white'\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n\r\n                    max: 1,\r\n                    fontColor: 'white'\r\n                }\r\n            }]\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                //  label: Manipulates label of each data point to respective title/artist of song\r\n                label: function (item, data) {\r\n                    var label = data.labels[item.index];\r\n                    return label + ': (' + item.xLabel + ', ' + item.yLabel + ')';\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    function determineStrengthColor(energyVal) {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - energyVal)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    return (\r\n        <div style={chartStyle}>\r\n            <Scatter data={parseData} options={options}\r\n                width={100}\r\n                height={100} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst chartStyle = {\r\n    margin: '10px 10px',\r\n    color: 'white',\r\n    borderRadius: '5px',\r\n    opacity: '0',\r\n\r\n    animation: 'initial-screen-slide-up-empty-full ease-out .5s',\r\n    animationDelay: '.75s',\r\n    animationFillMode: 'forwards'\r\n}","/* \r\n    Handles authentication and data retreival with Spotify API\r\n    For use with online React web applications.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       3/14/19\r\n*/\r\n\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport * as jsonexport from 'jsonexport/dist';\r\n\r\n//  Components\r\nimport SpotifyDataHandler from '../../api/SpotifyDataHandler';\r\n\r\nimport TrackTable from './Analytics/TrackTable'\r\nimport TrackScatterGraph from './Analytics/TrackScatterGraph'\r\nimport PlaylistRecommendation from './Recommendation/PlaylistRecommendationTable'\r\n\r\n// Internal Components\r\nlet recommendedPlaylist, currentPlaylist, currentPlaylistGraph\r\n\r\nclass PlaylistPage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            playlist: null,\r\n            playlistCsv: null,\r\n\r\n            //  Number values\r\n            energyAverage: null,\r\n            valenceAverage: null,\r\n            topArtistID: null,\r\n            bestTrackPopularity: null\r\n\r\n        }\r\n    }\r\n\r\n    sortBy = (type) => {\r\n        console.log(type)\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //  Retrieve playlist ID from user input\r\n        let playlistID = this.props.match.params.playlistId;\r\n\r\n        //  Special cases (Ex. user types a name of a playlist)\r\n        switch (playlistID) {\r\n\r\n            case 'Discover Weekly':\r\n                playlistID = 'discover_weekly_placeholder'\r\n                // TODO: Regex search Discover Weekly using DataHandler\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        SpotifyDataHandler.fetchPlaylist(playlistID).then(async playlist => {\r\n            this.setState(() => ({ sourcePlaylist: playlist }))\r\n\r\n            // Filter JSON data\r\n            const finalizedData = await new Promise(async (resolve, reject) => {\r\n\r\n                //  Total audio values across songs of playlist\r\n                let energyTotal = 0, valenceTotal = 0\r\n\r\n                let filteredData = playlist.tracks.items.map(async (item, index) => {\r\n                    //.console.log(item.track)\r\n                    let audioFeatures = await SpotifyDataHandler.fetchTrackData(item.track.id)\r\n\r\n                    energyTotal += audioFeatures.energy\r\n                    valenceTotal += audioFeatures.valence\r\n\r\n                    //  Calculating averages\r\n                    if (index === playlist.tracks.items.length - 1)\r\n                        this.setState(() => ({\r\n                            energyAverage: (energyTotal / filteredData.length),\r\n                            valenceAverage: (valenceTotal / filteredData.length)\r\n                        }))\r\n\r\n\r\n                    return {    //  Returning object for a playlist\r\n\r\n                        //  Core track data\r\n                        trackID: item.track.id,\r\n                        albumName: item.track.album.name,\r\n                        albumReleaseDate: item.track.album.release_date,\r\n                        totalTracks: item.track.album.total_tracks,\r\n                        trackName: item.track.name,\r\n                        trackPopularity: item.track.popularity,\r\n                        artist: item.track.artists.map(artist => {\r\n                            if (item.track.popularity > this.state.bestTrackPopularity) {\r\n                                this.setState({ bestTrackPopularity: item.track.popularity })\r\n                                this.state.topArtistID = artist.id\r\n                            }\r\n                            return {\r\n                                name: artist.name,\r\n                                artistType: artist.type\r\n                            }\r\n                        }),\r\n\r\n                        //  Audio metrics (basic)\r\n                        duration_ms: item.track.duration_ms,\r\n\r\n                        //  Audio metrics (advanced)\r\n\r\n                        energy: audioFeatures.energy,\r\n                        valence: audioFeatures.valence,\r\n                        danceability: audioFeatures.danceability,\r\n                        speechiness: audioFeatures.speechiness\r\n\r\n                    }\r\n                })\r\n\r\n                const results = await Promise.all(filteredData)\r\n\r\n                console.log(`Playlist's tracks' data resolved`)\r\n                console.log(results)\r\n                resolve(results)\r\n            })\r\n            this.setState({ playlist: finalizedData })\r\n\r\n            if (this.state.playlist) {\r\n                //* Edit recommendation parameters here\r\n\r\n                //  Generate listed table of current playlist's data\r\n                currentPlaylist = (<TrackTable trackList={this.state.playlist} sortBy={this.sortBy} />)\r\n                //  Generate scatter graph of current playlist's data\r\n                currentPlaylistGraph = (<TrackScatterGraph trackList={this.state.playlist} />)\r\n            } else {\r\n                currentPlaylist = (<p>Loading graph...</p>)\r\n            }\r\n\r\n            //  Logging quick results of playlist\r\n            console.log(\r\n                `Best artist's ID: ${this.state.topArtistID}\r\n                \\nAverage valence: ${this.state.valenceAverage}\r\n                \\nAverage energy: ${this.state.energyAverage}`)\r\n\r\n            // Generate playlist recommendation with given specific variables\r\n            if (this.state.energyAverage) {\r\n                //* Edit recommendation parameters here\r\n                recommendedPlaylist = (\r\n                    <PlaylistRecommendation\r\n                        energyAverage={this.state.energyAverage}\r\n                        valenceAverage={this.state.valenceAverage}\r\n                        topArtistID={this.state.topArtistID}>\r\n                    </PlaylistRecommendation>)\r\n                //!await this.setState({ recommendedPlaylist: recommendedPlaylist.state })\r\n            } else {\r\n                recommendedPlaylist = (<p>Loading recommendations...</p>)\r\n            }\r\n\r\n            // Export source playlist's data (user-defined) to CSV.\r\n            jsonexport(finalizedData, (err, csv) => {\r\n                if (err) return console.log(err);\r\n\r\n                console.log(`CSV file of playlist ${playlistID} created.`)\r\n                //.console.log(csv)\r\n\r\n                this.setState({ playlistCsv: csv })\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const csvHref = `data:text/csv;charset=utf-8,${escape(this.state.playlistCsv)}`\r\n        //  Buttons based on conditions\r\n        let sourcePlaylistDataDownloadBtn, recommendedPlaylistTableDisplayBtn\r\n\r\n        //  When the playlist's data has been retrieved, enabled CSV download.\r\n        if (this.state.sourcePlaylist)\r\n            sourcePlaylistDataDownloadBtn = (\r\n                <Button href={csvHref}\r\n                    download=\"playlist_data.csv\"\r\n                    variant='dark'>\r\n                    CSV file of {this.state.sourcePlaylist.name}'s track data\r\n                </Button >)\r\n\r\n        //  When a playlist is sucessfully fetched, enable ability to display.\r\n        if (recommendedPlaylist)\r\n            recommendedPlaylistTableDisplayBtn = (\r\n                <Button onClick={() => { document.getElementById('recommended-playlist-table').style.display = 'block' }}\r\n                    style={{ color: 'white', backgroundColor: 'darkslategray' }}>\r\n                    What would you recommend me?\r\n            </Button >)\r\n\r\n        //TODO: optimize views\r\n        return (\r\n            <div style={styles} >\r\n                <div className=\"App-header\">\r\n                    <h1>Incoming playlist data!</h1>\r\n                </div>\r\n                {this.props.children}\r\n\r\n                <div className='playlist-action-buttons'>\r\n                    {recommendedPlaylistTableDisplayBtn}\r\n                    {sourcePlaylistDataDownloadBtn}\r\n                </div>\r\n                {recommendedPlaylist}\r\n                {currentPlaylist}\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgb(40,40,40)',\r\n                    borderRadius: '10px',\r\n                    width: '90vw', margin: '0 auto',\r\n                }}>\r\n                    {currentPlaylistGraph}\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n    setRecommendedPlaylistVisible = () => {\r\n\r\n    }\r\n}\r\n\r\nvar styles = {\r\n    textAlign: 'center',\r\n    color: 'white'\r\n}\r\n\r\nexport default PlaylistPage;\r\n\r\n","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist/user ID combo and submit to\r\n    retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu), Chhoden Gurung\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Particles from 'particlesjs'\r\n\r\nimport HomePage from './components/ui/HomePage';\r\nimport LoginPage from './components/ui/LoginPage';\r\nimport PlaylistPage from './components/ui/Playlist/PlaylistPage';\r\nimport TrackAnalysis from './_deprecated/ui/TrackAnalysis';\r\n\r\nimport './App.css'\r\n\r\nimport auth from './resources/auth.json';\r\n\r\nvar redirectURI, baseURL\r\n\r\n//Retrieve access_token and redirect it to playlistPage\r\nfunction Callback() {\r\n  const urlParams = new URLSearchParams(window.location.hash.replace(/#/, ''));\r\n  let token = urlParams.get('access_token');\r\n\r\n  if (token) {\r\n    //Storing the accessToken of current session\r\n    sessionStorage.setItem('token', token);\r\n    return <Redirect to='/home' />;\r\n  } else {\r\n    return <Redirect to='/login' />;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    if (this.props.localhost === true) {\r\n      console.log(`Local host mode enabled. Disable '_localhost' (in index.jsx) before deployment.`)\r\n      baseURL = ''\r\n      redirectURI = auth.spotify.client.redirectURILocal\r\n    } else {\r\n      baseURL = this.props.baseURL\r\n      redirectURI = auth.spotify.client.redirectURI\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    // Load background (ParticlesJS)\r\n    window.onload = function () {\r\n      Particles.init({\r\n        selector: '.background-particles'\r\n      });\r\n    };\r\n\r\n    return (\r\n      <Router basename={baseURL}>\r\n        <canvas className=\"background-particles\"></canvas>\r\n        <script src={Particles}></script>\r\n        <Route path='/' exact render={() => <LoginPage uri={redirectURI} />} />\r\n        <Route path='/home' render={() => <HomePage scope={baseURL} />} />\r\n        <Route path='/callback' exact component={Callback} />\r\n        <Route path='/playlist/:playlistId' component={PlaylistPage} />\r\n        <Route path='/sample-playlist-visual' component={TrackAnalysis} />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/*  \r\n    Generates an HTML table of a playlist recommendation\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\n\r\nimport SpotifyDataHandler from '../../../api/SpotifyDataHandler'\r\n\r\nimport './PlaylistRecommendationTable.scss'\r\n\r\nexport default class PlaylistRecommendationTable extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            recommendedPlaylistTable: (<p>'where's the table</p>)\r\n        }\r\n\r\n        //TODO: Add sorting function\r\n        this.sortBy = this.sortBy.bind(this)\r\n    }\r\n\r\n    // Start fetching a recommended playlist before generating table\r\n    componentDidMount() {\r\n\r\n        //* See function to customize parameters\r\n        SpotifyDataHandler.fetchCustomizedRecommendation(\r\n            this.props.energyAverage, this.props.valenceAverage, this.props.topArtistID)\r\n            .then(async tracks => {\r\n                await new Promise((resolve, reject) => {\r\n                    this.setState(() => ({\r\n                        recommendedPlaylist: tracks\r\n                    }))\r\n\r\n                    //.console.log(resolve)\r\n                })\r\n            })\r\n    }\r\n\r\n    getCurrentRecommendation = () => {\r\n        return this.state.recommendedPlaylist\r\n    }\r\n\r\n    //  Returns an HSL color (green-red) according to strength of a song's Energy value\r\n    determineStrengthColor = (nrg_val) => {\r\n        const green = 120\r\n\r\n        var hue = green * (1 - nrg_val)\r\n\r\n        // Return an CSS HSL string\r\n        return 'hsl(' + hue + ', 100%, 50%)';\r\n    }\r\n\r\n    //  Display more info on a single track\r\n    showMoreInfo = () => {\r\n        console.log('You clicked on a song! A future feature will replace this message!')\r\n    }\r\n\r\n    sortBy = (type) => {\r\n        console.log(`Sorting by ${type}`)\r\n\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    if (typeof low[type] === 'string') return ('' + low[type]).localeCompare(high[type]);\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n    // Table of tracks displaying details according to the ones in the table header.\r\n    render = () => {\r\n        //.console.log(this.state.recommendedPlaylist)\r\n\r\n        let playlistTable\r\n        if (this.state.recommendedPlaylist) {\r\n\r\n            playlistTable =\r\n                (<tbody>\r\n                    {\r\n                        this.state.recommendedPlaylist.map(track =>\r\n                            (\r\n                                <tr className=\"track-table-item\" key={`item-${track.id}`}\r\n                                    style={{ backgroundColor: this.determineStrengthColor(track.energy) }}>\r\n                                    <td className='artist-text'>\r\n                                        {\r\n                                            track.artists.map((artist, index) => {\r\n                                                if (index === track.artists.length - 1)\r\n                                                    return (<a href={artist.external_urls.spotify} key={`item-${artist.id}`}>\r\n                                                        {artist.name}\r\n                                                    </a>)\r\n\r\n                                                return (<a href={artist.external_urls.spotify} key={`item-${artist.id}`}>\r\n                                                    {artist.name},{' '}\r\n                                                </a>)\r\n                                            }\r\n                                            )\r\n                                        }\r\n                                    </td>\r\n                                    <td className='title-text'>\r\n                                        <a href={track.external_urls.spotify}>\r\n                                            {track.name}\r\n                                        </a>\r\n                                    </td>\r\n                                    <td className='length-text'>{`\r\n                                        ${Math.floor((track.duration_ms / 1000) / 60)}\r\n                                        :\r\n                                        ${Math.floor((track.duration_ms / 1000) % 60)\r\n                                            .toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}\r\n                                    `}</td>\r\n                                </tr>\r\n                            )\r\n                        )\r\n                    }\r\n                </tbody>)\r\n\r\n\r\n            console.log('Generated recommended playlist off custom queries!')\r\n        }\r\n\r\n\r\n        if (playlistTable)\r\n            return (\r\n                <div id='recommended-playlist-table' style={{ display: 'none', animationDelay: '0ms' }}>\r\n                    <h4>Here's some recommendations for you!</h4>\r\n                    <table className='track-table' >\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <button type='sort' name='artist' onClick={() => this.state.sortBy('artist')}>\r\n                                        Artist\r\n                                    </button>\r\n                                </th>\r\n                                <th>\r\n                                    <button type='sort' name='title' onClick={() => this.state.sortBy('title')}>\r\n                                        Title\r\n                                    </button>\r\n                                </th>\r\n                                <th>\r\n                                    <button type='sort' name='seconds' onClick={() => this.state.sortBy('duration_ms')}>\r\n                                        Length\r\n                                    </button>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        {playlistTable}\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            )\r\n        else\r\n            return (<p>Loading recommendations...</p>)\r\n    }\r\n}","/*  \r\n    Generates a page of a playlist's tracks' details which include:\r\n    Title, Artist, Energy, Valence, and length (sec.)\r\n\r\n    @author Joe (joev@uw.edu)\r\n*/\r\n\r\nimport React from 'react'\r\n\r\n//  Internal Components\r\nimport Particles from 'particlesjs'\r\n\r\nimport './TrackAnalysis.scss'\r\nimport TrackTable from '../../components/ui/Playlist/Analytics/TrackTable';\r\nimport TrackScatterGraph from '../../components/ui/Playlist/Analytics/TrackScatterGraph';\r\n\r\nexport default class TrackAnalysis extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            track_data: this.props.track_data\r\n        }\r\n\r\n        this.sortBy = this.sortBy.bind(this)\r\n    }\r\n\r\n    /*  Table Functions */\r\n\r\n    sortBy = (type) => {\r\n        console.log(`Sorting by ${type}`)\r\n\r\n        this.setState({\r\n            track_data:\r\n                this.props.track_data.sort((low, high) => {\r\n                    if (typeof low[type] === 'string') return ('' + low[type]).localeCompare(high[type]);\r\n                    return low[type] - high[type]\r\n                })\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n\r\n        // Load background\r\n        window.onload = function () {\r\n            Particles.init({\r\n                selector: '.background-particles-alt'\r\n            });\r\n        };\r\n\r\n        return (\r\n            <div className='Analysis'>\r\n                <header className=\"App-header\" >\r\n                    <p>\r\n                        Let's learn about your music!\r\n                    </p>\r\n                </header>\r\n                <div className='App-body'>\r\n                    <TrackScatterGraph track_list={this.state.track_data} />\r\n                    <TrackTable track_list={this.state.track_data} sortBy={this.sortBy} />\r\n                    <canvas className=\"background-particles-alt\"></canvas>\r\n                    <script src={Particles}></script>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n    --- Playlist Spotter ---\r\n    Web application that identifies user-specified Spotify playlists,\r\n    and performs various functions with given data, such as but not,\r\n    limited to:\r\n        - Playlist Details (Artist/Title)\r\n        - Track Audio Features display (Energy, valence, etc.)\r\n        - Graphing of numeric data (Ex. Energy vs. Valence)\r\n        - Recommending a playlist based on a user's playlist's values\r\n\r\n    Originally written as a concept, with plans to go into production.\r\n\r\n    Powered by the Spotify Web API (https://developer.spotify.com/web-api/)\r\n\r\n    @author Joe Villegas (joev@uw.edu)\r\n    @date   June 2019\r\n*/\r\n\r\n// Loads the basis of the entire web application.\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\n\r\n//  Server-side authentication\r\n//import './Auth.jsx';\r\n\r\n/* \r\nDependencies needed: \r\n    npm install:\r\n    -axios\r\n    -particlesjs\r\n    -chart.js\r\n    -react-chartjs-2\r\n*/\r\n\r\n//* Debugging on local server\r\nconst _localhost = false\r\n//* Change only if hosting elsewhere!\r\nvar baseURL = '/spotify-researcher-assistant/'\r\n\r\n// Renders the basis of the application.\r\nReactDOM.render(<App localhost={_localhost} baseURL={baseURL} />,\r\n    document.getElementById('root'));\r\n\r\n// For enabling local data caching and offline/mobile app use.\r\n// Progressive Web Application\r\nserviceWorker.register();\r\n"],"sourceRoot":""}