{"version":3,"sources":["serviceWorker.js","components/api/SpotifyDataHandler.jsx","components/ui/HomePage.jsx","components/ui/LoginPage.jsx","components/ui/PlaylistPage.jsx","App.jsx","index.jsx","logo.svg"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","api_SpotifyDataHandler","SpotifyDataHandler","token","_this","this","Object","classCallCheck","Spotify","SpotifyWebAPI","fetchPlaylistData","playlist_id","arguments","length","undefined","auth","spotify","sample","getPlaylist","data","track_list","err","fetchTrackData","track_ids","generateTrackIDListString","track_data_sample","audio_features","getAudioFeaturesForTracks","track_data","index","items","forEach","track","title","artist","asyncToGenerator","regenerator_default","a","mark","_callee","ids_string","i","wrap","_context","prev","next","concat","id","abrupt","stop","randomTrackID","_callee2","track_amount","_context2","Math","floor","random","componentDidMount","props","onRef","componentWillUnmount","setAccessToken","user_info","getMe","_ref3","_callee3","result","_context3","display_name","_x","apply","access_token","sessionStorage","setItem","getUserPlaylists","playlists","finally","name","fetchPlaylists","react_default","createElement","getItem","HomePage","possibleConstructorReturn","getPrototypeOf","call","redirectToPlaylist","history","push","pathname","render","dropdown_playlists","map","playlist","Button","className","key","href","src","logo","alt","style","animation","animationDelay","onSubmit","handleSubmit","type","value","onChange","handleChange","placeholder","required","Dropdown","Toggle","variant","Menu","bind","assertThisInitialized","_this2","_ref","sent","setState","playlistData","event","target","preventDefault","React","Component","LoginPage","client_id","client","redirect_uri","url","Form","horizontal","FormGroup","controlId","bsStyle","PlaylistPage","playlistCsv","params","playlistId","fetchPlaylist","jsonexport","csv","csv_href","escape","styles","children","download","textAlign","color","Callback","URLSearchParams","hash","replace","get","react_router","to","App","onload","Particles","init","selector","react_router_dom","path","exact","component","ReactDOM","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a560a4e7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* \r\n    Handles authentication and data retreival with Spotify API\r\n    For use with online React web applications.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       3/14/19\r\n*/\r\n\r\n//  Internal Components\r\nimport React from 'react'\r\nimport SpotifyWebAPI from 'spotify-web-api-js'\r\n\r\n//  Resources\r\nimport auth from '../../resources/auth.json'   //  Must include valid IDs before methods are called\r\n\r\n//  Samples\r\nimport track_list from '../../data/track_list.json'\r\nimport track_data from '../../data/track_info.json'\r\n//import track_list_sample from '../../data/track_list_sample.json'\r\nimport track_data_sample from '../../data/track_info_sample.json'\r\n\r\n\r\nclass SpotifyDataHandler {\r\n    constructor (token) {\r\n        this.setAccessToken(token)  // Sets token across application\r\n\r\n        this.user_info = this.Spotify.getMe().then(async (result) => {\r\n            await console.log(`Logged in as ${result.display_name}`)\r\n\r\n            return result\r\n        }\r\n        )\r\n    }\r\n\r\n    Spotify = new SpotifyWebAPI()\r\n\r\n\r\n    setAccessToken(access_token) {\r\n        this.Spotify.setAccessToken(access_token);\r\n\r\n        sessionStorage.setItem('token', access_token);// Sets new global token\r\n\r\n        console.log('New token for Spotify set from user input.')\r\n    }\r\n\r\n    /*   Data fetch functions   */\r\n\r\n    async fetchPlaylists() {\r\n        let playlists\r\n\r\n        await this.Spotify.getUserPlaylists(this.user_info.id)\r\n            .catch((error) => {\r\n                console.error(error)\r\n            }).then((result) => {\r\n                //console.log(result)\r\n                playlists = result.items\r\n            }).finally(() => {\r\n                return 'null'\r\n            })\r\n\r\n        return playlists\r\n    }\r\n\r\n    fetchPlaylist(playlist_id) {\r\n        if (playlist_id === null) {\r\n            return console.error('User did not specify Playlist ID.');\r\n        }\r\n\r\n        return this.Spotify.getPlaylist(playlist_id)\r\n    }\r\n\r\n    async fetchPlaylistID(name) {\r\n        if (!this.playlists)\r\n            await this.fetchPlaylists()\r\n        console.log(this.playlists)\r\n\r\n        if (!name) {\r\n            console.err('Playlist ID fetching failed: No playlist info specified.')\r\n            return 'not cool'\r\n        } else {\r\n            //this.Spotify\r\n            return 'cool'\r\n        }\r\n    }\r\n\r\n    //  Returns Track object using specified playlist ID(s), defaults to sample ID\r\n    fetchPlaylistData = (\r\n        playlist_id = this.state.playlist_id) => {\r\n        //  When sample playlist is requested\r\n        playlist_id = 'sample' ? auth.spotify.sample.playlist_id : playlist_id\r\n\r\n        if (playlist_id === null) return console.error('User did not specify Playlist ID.')\r\n\r\n        this.Spotify.getPlaylist(playlist_id)\r\n            .then(data => {\r\n                track_list = data\r\n                console.log(`Received a playlist: `, data)\r\n            }, err => {\r\n                console.log(`Error fetching playlist - `, err)\r\n            })\r\n    }\r\n\r\n    //  Returns Track object(s) using specified Track ID(s), defaults to inputted playlist ID\r\n    fetchTrackData = (\r\n        track_ids = this.generateTrackIDListString()) => {\r\n        //  When sample track data is requested\r\n        if (track_ids === 'sample') return track_data_sample.audio_features\r\n\r\n        this.Spotify.getAudioFeaturesForTracks(track_ids)\r\n            .then(data => {\r\n                track_data = data\r\n                console.log(`Audio features for track(s): `, data)\r\n            }, err => {\r\n                console.log(`Error fetching track features - `, err)\r\n            })\r\n\r\n        let index = 0\r\n\r\n        //  Append Title and Artist to Features list\r\n        track_list.items.forEach(track => {\r\n            track_data[index++].audio_features.title = track.title\r\n            track_data[index++].audio_features.artist = track.artist\r\n        })\r\n\r\n        return track_data.audio_features\r\n    }\r\n\r\n    /*  Formatting/Generation functions */\r\n\r\n    //  Returns string of track IDs from currently populated playlist JSON\r\n    generateTrackIDListString = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        var ids_string = \"\"\r\n\r\n        for (var i = 0; i < track_list.items.length(); i++) {\r\n            ids_string += `${track_list.items[i].track.id},`\r\n        }\r\n\r\n        return ids_string\r\n    }\r\n\r\n    /*  Random data fetch functions   */\r\n\r\n    //  Returns random Track ID using an exisiting Playlist object\r\n    randomTrackID = async () => {\r\n        if (!track_list) await this.fetchPlaylistData()\r\n\r\n        let track_amount = track_list.items.length()\r\n\r\n        return track_list.items[Math.floor(Math.random() * track_amount)].track.id\r\n    }\r\n\r\n    /*  Lifecycle functions  */\r\n    componentDidMount = () => {\r\n        this.props.onRef(this)\r\n    }\r\n    componentWillUnmount = () => {\r\n        this.props.onRef(undefined)\r\n    }\r\n\r\n    //  This is a purely functional component, hence no need to return any HTML.\r\n    render() {\r\n        return (<p></p>)\r\n    }\r\n}\r\n\r\nexport default new SpotifyDataHandler(sessionStorage.getItem('token'));","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist/user ID combo and submit to\r\n    retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu)\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react'\r\nimport { Dropdown, Button } from 'react-bootstrap'\r\nimport SpotifyDataHandler from '../api/SpotifyDataHandler'\r\n\r\n//  Internal Components\r\nimport logo from '../../logo.svg'\r\nimport './HomePage.scss'\r\n\r\nclass HomePage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            playlist_id: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        var playlistData = async () => {\r\n            let playlists = await SpotifyDataHandler.fetchPlaylists();\r\n\r\n            this.setState(() => {\r\n                return { playlists: playlists }\r\n            });\r\n        }\r\n        playlistData()\r\n    }\r\n\r\n    redirectToPlaylist = () => {\r\n        this.props.history.push({ pathname: '/playlist/' + this.state.playlist_id })\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ playlist_id: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.redirectToPlaylist();\r\n    }\r\n\r\n    render = () => {\r\n        var dropdown_playlists = this.state.playlists ?\r\n            this.state.playlists.map(playlist => {\r\n                return (<Button className='btn-block'\r\n                    key={playlist.id + '-key'} href={`/playlist/${playlist.id}`}\r\n                >\r\n                    {playlist.name}</Button>)\r\n            })\r\n            : 'Loading playlists'\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </header>\r\n\r\n                <div className='App-body'>\r\n\r\n                    <div className=\"body-text\" style={{ animation: 'text-slide-up-empty-full 1s' }}>\r\n                        <p className=\"hello-headline\" id=\"hello-headline\">\r\n                            <b>Hi! I'm your Spotify Researcher.</b>\r\n                        </p>\r\n                        <p className=\"hint-headline\" id=\"hint-headline\" style={{ animationDelay: '2s' }}>\r\n                            Input a playlist ID to learn a little more about your music.\r\n                            <br />\r\n                        </p>\r\n                    </div>\r\n\r\n                    <form className='user-form' onSubmit={this.handleSubmit}>\r\n                        <br />\r\n                        <input type=\"text\" value={this.state.playlist_id} name=\"playlist_id\"\r\n                            onChange={this.handleChange} placeholder=\"Playlist ID\" required />\r\n                        <br />\r\n                        <Dropdown id=\"dropdown-playlist\" className='fill-style'>\r\n                            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className='fill-style'>\r\n                                Select one of your playlists\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className='fill-style' >\r\n                                {dropdown_playlists}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <br />\r\n                        <input type=\"submit\" value=\"Get the Facts\" />\r\n                    </form>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport { Form, FormGroup, Button } from 'react-bootstrap';\r\nimport './LoginPage.scss';\r\nimport auth from '../../resources/auth.json';\r\n\r\n\r\nclass LoginPage extends Component {\r\n    render() {\r\n        const client_id = auth.spotify.client.id;\r\n        const redirect_uri = auth.spotify.client.redirect_uri;\r\n        const scope = 'user-read-private user-read-email';\r\n        const response_type = 'token';\r\n        const state = '123';\r\n\r\n        const url =\r\n            `https://accounts.spotify.com/authorize?client_id=${client_id}&redirect_uri=${redirect_uri}&scope=${scope}&response_type=${response_type}&state=${state}`\r\n        return (\r\n            <div className=\"login\">\r\n                <Form horizontal>\r\n                    <h1>Welcome to Playlist Recommendation</h1>\r\n                    <br />\r\n                    <FormGroup controlId=\"formHorizontalEmail\">\r\n                        <h4>Please press continue to sign in with Spotify</h4>\r\n                        <Button bsStyle=\"success\" href={url} >Continue</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\nimport SpotifyDataHandler from '../api/SpotifyDataHandler';\r\n//import SpotifyDataAccessor from '../api/SpotifyDataAccessor';\r\nimport * as jsonexport from 'jsonexport/dist';\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nclass PlaylistPage extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            playlist: null,\r\n            playlistCsv: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let playlist_id = this.props.match.params.playlistId;\r\n        switch (playlist_id) {\r\n            case 'Discover Weekly':\r\n                playlist_id = 'discover_weekly_placeholder'\r\n                // TODO: Regex search Discover Weekly using DataHandler\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        SpotifyDataHandler.fetchPlaylist(playlist_id).then(data => {\r\n\r\n            //Convert Json to csv\r\n            jsonexport(data, (err, csv) => {\r\n                if (err) return console.log(err);\r\n\r\n                console.log(`CSV file of playlist ${playlist_id} created:`)\r\n                console.log(csv)\r\n\r\n                this.setState({\r\n                    playlist: data,\r\n                    playlistCsv: csv\r\n                })\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const csv_href = `data:text/csv;charset=utf-8,${escape(this.state.playlistCsv)}`;\r\n\r\n        return (\r\n            <div style={styles}>\r\n                <h1>This is your playlist's page!</h1>\r\n                {this.props.children}\r\n                <Button href={csv_href} download=\"playlist_data.csv\">Click to Download CSV file</Button>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nvar styles = {\r\n    textAlign: 'center',\r\n    color: 'white'\r\n}\r\n\r\nexport default PlaylistPage;\r\n\r\n","/* \r\n    The initial screen of the app;\r\n    Here the user can input a playlist/user ID combo and submit to\r\n    retrieve information about that playlist's tracks.\r\n    \r\n    @reference  (https://developer.spotify.com/documentation/web-api/)\r\n    @author     Joe Villegas (joev@uw.edu), Chhoden Gurung\r\n    @date       4/20/19\r\n*/\r\n\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Particles from 'particlesjs'\r\n\r\nimport HomePage from './components/ui/HomePage';\r\nimport LoginPage from './components/ui/LoginPage';\r\nimport PlaylistPage from './components/ui/PlaylistPage';\r\n\r\n//Retrieve access_token and redirect it to playlistPage\r\nfunction Callback() {\r\n  const urlParams = new URLSearchParams(window.location.hash.replace(/#/, ''));\r\n  let token = urlParams.get('access_token');\r\n\r\n  if (token) {\r\n    //Storing the accessToken of current session\r\n    sessionStorage.setItem('token', token);\r\n    return <Redirect to='/home' />;\r\n  } else {\r\n    return <Redirect to='/login' />;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    // Load background (ParticlesJS)\r\n    window.onload = function () {\r\n      Particles.init({\r\n        selector: '.background-particles'\r\n      });\r\n    };\r\n\r\n    return (\r\n      <Router>\r\n        <canvas className=\"background-particles\"></canvas>\r\n        <script src={Particles}></script>\r\n        <Route path='/' exact component={LoginPage} />\r\n        <Route path='/home' component={HomePage} />\r\n        <Route path='/callback' exact component={Callback} />\r\n        <Route path='/playlist/:playlistId' component={PlaylistPage} />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n//  Retrieve access token beforehand\r\n\r\n//  Server-side authentication\r\n//import './Auth.jsx';\r\n\r\n\r\n/* \r\nDependencies needed: \r\n    npm install:\r\n    -axios\r\n    -axios-retry\r\n    -particlesjs\r\n    -chart.js\r\n    -react-chartjs-2\r\n*/\r\n\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// PWA\r\nserviceWorker.register();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.8499c8e5.svg\";"],"sourceRoot":""}